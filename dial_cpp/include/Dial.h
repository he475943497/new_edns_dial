/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Dial_H
#define Dial_H

#include "thrift/TDispatchProcessor.h"
#include "dnsrpc_types.h"

namespace rpc { namespace yamutech { namespace com {

class DialIf {
 public:
  virtual ~DialIf() {}
  virtual RetCode::type systemCommand(const SysCommand::type cmdType) = 0;
  virtual RetCode::type addHealthGroup(const HealthGroupInfo& health, const std::string& policyName) = 0;
  virtual RetCode::type delHealthGroup(const HealthGroupInfo& health, const std::string& policyName) = 0;
  virtual RetCode::type addHealthRecord(const HealthGroupInfo& health, const DialRecord& rec) = 0;
  virtual RetCode::type modHealthRecord(const HealthGroupInfo& health, const DialRecord& rec) = 0;
  virtual RetCode::type delHealthRecord(const HealthGroupInfo& health, const DialRecord& rec) = 0;
  virtual RetCode::type addHealthPolicy(const HealthPolicyInfo& policy) = 0;
  virtual RetCode::type modHealthPolicy(const HealthPolicyInfo& policy) = 0;
  virtual RetCode::type delHealthPolicy(const HealthPolicyInfo& policy) = 0;
  virtual RetCode::type dialServerConfig(const DialServerType::type typ, const bool allowed) = 0;
  virtual RetCode::type addDialServer(const IpAddr& ip, const DialServerType::type typ) = 0;
  virtual RetCode::type delDialServer(const IpAddr& ip, const DialServerType::type typ) = 0;
  virtual RetCode::type addNginxGroup(const std::string& groupName, const std::string& policyName) = 0;
  virtual RetCode::type delNginxGroup(const std::string& groupName, const std::string& policyName) = 0;
  virtual RetCode::type addNginxServer(const std::string& groupName, const DialNginxServer& server) = 0;
  virtual RetCode::type modNginxServer(const std::string& groupName, const DialNginxServer& server) = 0;
  virtual RetCode::type delNginxServer(const std::string& groupName, const DialNginxServer& server) = 0;
  virtual void heartBeat(HeartBeatState& _return) = 0;
  virtual RetCode::type setServerState(const bool enable) = 0;
};

class DialIfFactory {
 public:
  typedef DialIf Handler;

  virtual ~DialIfFactory() {}

  virtual DialIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(DialIf* /* handler */) = 0;
};

class DialIfSingletonFactory : virtual public DialIfFactory {
 public:
  DialIfSingletonFactory(const boost::shared_ptr<DialIf>& iface) : iface_(iface) {}
  virtual ~DialIfSingletonFactory() {}

  virtual DialIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(DialIf* /* handler */) {}

 protected:
  boost::shared_ptr<DialIf> iface_;
};

class DialNull : virtual public DialIf {
 public:
  virtual ~DialNull() {}
  RetCode::type systemCommand(const SysCommand::type /* cmdType */) {
    RetCode::type _return = (RetCode::type)0;
    return _return;
  }
  RetCode::type addHealthGroup(const HealthGroupInfo& /* health */, const std::string& /* policyName */) {
    RetCode::type _return = (RetCode::type)0;
    return _return;
  }
  RetCode::type delHealthGroup(const HealthGroupInfo& /* health */, const std::string& /* policyName */) {
    RetCode::type _return = (RetCode::type)0;
    return _return;
  }
  RetCode::type addHealthRecord(const HealthGroupInfo& /* health */, const DialRecord& /* rec */) {
    RetCode::type _return = (RetCode::type)0;
    return _return;
  }
  RetCode::type modHealthRecord(const HealthGroupInfo& /* health */, const DialRecord& /* rec */) {
    RetCode::type _return = (RetCode::type)0;
    return _return;
  }
  RetCode::type delHealthRecord(const HealthGroupInfo& /* health */, const DialRecord& /* rec */) {
    RetCode::type _return = (RetCode::type)0;
    return _return;
  }
  RetCode::type addHealthPolicy(const HealthPolicyInfo& /* policy */) {
    RetCode::type _return = (RetCode::type)0;
    return _return;
  }
  RetCode::type modHealthPolicy(const HealthPolicyInfo& /* policy */) {
    RetCode::type _return = (RetCode::type)0;
    return _return;
  }
  RetCode::type delHealthPolicy(const HealthPolicyInfo& /* policy */) {
    RetCode::type _return = (RetCode::type)0;
    return _return;
  }
  RetCode::type dialServerConfig(const DialServerType::type /* typ */, const bool /* allowed */) {
    RetCode::type _return = (RetCode::type)0;
    return _return;
  }
  RetCode::type addDialServer(const IpAddr& /* ip */, const DialServerType::type /* typ */) {
    RetCode::type _return = (RetCode::type)0;
    return _return;
  }
  RetCode::type delDialServer(const IpAddr& /* ip */, const DialServerType::type /* typ */) {
    RetCode::type _return = (RetCode::type)0;
    return _return;
  }
  RetCode::type addNginxGroup(const std::string& /* groupName */, const std::string& /* policyName */) {
    RetCode::type _return = (RetCode::type)0;
    return _return;
  }
  RetCode::type delNginxGroup(const std::string& /* groupName */, const std::string& /* policyName */) {
    RetCode::type _return = (RetCode::type)0;
    return _return;
  }
  RetCode::type addNginxServer(const std::string& /* groupName */, const DialNginxServer& /* server */) {
    RetCode::type _return = (RetCode::type)0;
    return _return;
  }
  RetCode::type modNginxServer(const std::string& /* groupName */, const DialNginxServer& /* server */) {
    RetCode::type _return = (RetCode::type)0;
    return _return;
  }
  RetCode::type delNginxServer(const std::string& /* groupName */, const DialNginxServer& /* server */) {
    RetCode::type _return = (RetCode::type)0;
    return _return;
  }
  void heartBeat(HeartBeatState& /* _return */) {
    return;
  }
  RetCode::type setServerState(const bool /* enable */) {
    RetCode::type _return = (RetCode::type)0;
    return _return;
  }
};

typedef struct _Dial_systemCommand_args__isset {
  _Dial_systemCommand_args__isset() : cmdType(false) {}
  bool cmdType;
} _Dial_systemCommand_args__isset;

class Dial_systemCommand_args {
 public:

  Dial_systemCommand_args() : cmdType((SysCommand::type)0) {
  }

  virtual ~Dial_systemCommand_args() throw() {}

  SysCommand::type cmdType;

  _Dial_systemCommand_args__isset __isset;

  void __set_cmdType(const SysCommand::type val) {
    cmdType = val;
  }

  bool operator == (const Dial_systemCommand_args & rhs) const
  {
    if (!(cmdType == rhs.cmdType))
      return false;
    return true;
  }
  bool operator != (const Dial_systemCommand_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Dial_systemCommand_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Dial_systemCommand_pargs {
 public:


  virtual ~Dial_systemCommand_pargs() throw() {}

  const SysCommand::type* cmdType;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Dial_systemCommand_result__isset {
  _Dial_systemCommand_result__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _Dial_systemCommand_result__isset;

class Dial_systemCommand_result {
 public:

  Dial_systemCommand_result() : success((RetCode::type)0) {
  }

  virtual ~Dial_systemCommand_result() throw() {}

  RetCode::type success;
  Xception ex;

  _Dial_systemCommand_result__isset __isset;

  void __set_success(const RetCode::type val) {
    success = val;
  }

  void __set_ex(const Xception& val) {
    ex = val;
  }

  bool operator == (const Dial_systemCommand_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const Dial_systemCommand_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Dial_systemCommand_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Dial_systemCommand_presult__isset {
  _Dial_systemCommand_presult__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _Dial_systemCommand_presult__isset;

class Dial_systemCommand_presult {
 public:


  virtual ~Dial_systemCommand_presult() throw() {}

  RetCode::type* success;
  Xception ex;

  _Dial_systemCommand_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Dial_addHealthGroup_args__isset {
  _Dial_addHealthGroup_args__isset() : health(false), policyName(false) {}
  bool health;
  bool policyName;
} _Dial_addHealthGroup_args__isset;

class Dial_addHealthGroup_args {
 public:

  Dial_addHealthGroup_args() : policyName() {
  }

  virtual ~Dial_addHealthGroup_args() throw() {}

  HealthGroupInfo health;
  std::string policyName;

  _Dial_addHealthGroup_args__isset __isset;

  void __set_health(const HealthGroupInfo& val) {
    health = val;
  }

  void __set_policyName(const std::string& val) {
    policyName = val;
  }

  bool operator == (const Dial_addHealthGroup_args & rhs) const
  {
    if (!(health == rhs.health))
      return false;
    if (!(policyName == rhs.policyName))
      return false;
    return true;
  }
  bool operator != (const Dial_addHealthGroup_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Dial_addHealthGroup_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Dial_addHealthGroup_pargs {
 public:


  virtual ~Dial_addHealthGroup_pargs() throw() {}

  const HealthGroupInfo* health;
  const std::string* policyName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Dial_addHealthGroup_result__isset {
  _Dial_addHealthGroup_result__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _Dial_addHealthGroup_result__isset;

class Dial_addHealthGroup_result {
 public:

  Dial_addHealthGroup_result() : success((RetCode::type)0) {
  }

  virtual ~Dial_addHealthGroup_result() throw() {}

  RetCode::type success;
  Xception ex;

  _Dial_addHealthGroup_result__isset __isset;

  void __set_success(const RetCode::type val) {
    success = val;
  }

  void __set_ex(const Xception& val) {
    ex = val;
  }

  bool operator == (const Dial_addHealthGroup_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const Dial_addHealthGroup_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Dial_addHealthGroup_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Dial_addHealthGroup_presult__isset {
  _Dial_addHealthGroup_presult__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _Dial_addHealthGroup_presult__isset;

class Dial_addHealthGroup_presult {
 public:


  virtual ~Dial_addHealthGroup_presult() throw() {}

  RetCode::type* success;
  Xception ex;

  _Dial_addHealthGroup_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Dial_delHealthGroup_args__isset {
  _Dial_delHealthGroup_args__isset() : health(false), policyName(false) {}
  bool health;
  bool policyName;
} _Dial_delHealthGroup_args__isset;

class Dial_delHealthGroup_args {
 public:

  Dial_delHealthGroup_args() : policyName() {
  }

  virtual ~Dial_delHealthGroup_args() throw() {}

  HealthGroupInfo health;
  std::string policyName;

  _Dial_delHealthGroup_args__isset __isset;

  void __set_health(const HealthGroupInfo& val) {
    health = val;
  }

  void __set_policyName(const std::string& val) {
    policyName = val;
  }

  bool operator == (const Dial_delHealthGroup_args & rhs) const
  {
    if (!(health == rhs.health))
      return false;
    if (!(policyName == rhs.policyName))
      return false;
    return true;
  }
  bool operator != (const Dial_delHealthGroup_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Dial_delHealthGroup_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Dial_delHealthGroup_pargs {
 public:


  virtual ~Dial_delHealthGroup_pargs() throw() {}

  const HealthGroupInfo* health;
  const std::string* policyName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Dial_delHealthGroup_result__isset {
  _Dial_delHealthGroup_result__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _Dial_delHealthGroup_result__isset;

class Dial_delHealthGroup_result {
 public:

  Dial_delHealthGroup_result() : success((RetCode::type)0) {
  }

  virtual ~Dial_delHealthGroup_result() throw() {}

  RetCode::type success;
  Xception ex;

  _Dial_delHealthGroup_result__isset __isset;

  void __set_success(const RetCode::type val) {
    success = val;
  }

  void __set_ex(const Xception& val) {
    ex = val;
  }

  bool operator == (const Dial_delHealthGroup_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const Dial_delHealthGroup_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Dial_delHealthGroup_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Dial_delHealthGroup_presult__isset {
  _Dial_delHealthGroup_presult__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _Dial_delHealthGroup_presult__isset;

class Dial_delHealthGroup_presult {
 public:


  virtual ~Dial_delHealthGroup_presult() throw() {}

  RetCode::type* success;
  Xception ex;

  _Dial_delHealthGroup_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Dial_addHealthRecord_args__isset {
  _Dial_addHealthRecord_args__isset() : health(false), rec(false) {}
  bool health;
  bool rec;
} _Dial_addHealthRecord_args__isset;

class Dial_addHealthRecord_args {
 public:

  Dial_addHealthRecord_args() {
  }

  virtual ~Dial_addHealthRecord_args() throw() {}

  HealthGroupInfo health;
  DialRecord rec;

  _Dial_addHealthRecord_args__isset __isset;

  void __set_health(const HealthGroupInfo& val) {
    health = val;
  }

  void __set_rec(const DialRecord& val) {
    rec = val;
  }

  bool operator == (const Dial_addHealthRecord_args & rhs) const
  {
    if (!(health == rhs.health))
      return false;
    if (!(rec == rhs.rec))
      return false;
    return true;
  }
  bool operator != (const Dial_addHealthRecord_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Dial_addHealthRecord_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Dial_addHealthRecord_pargs {
 public:


  virtual ~Dial_addHealthRecord_pargs() throw() {}

  const HealthGroupInfo* health;
  const DialRecord* rec;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Dial_addHealthRecord_result__isset {
  _Dial_addHealthRecord_result__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _Dial_addHealthRecord_result__isset;

class Dial_addHealthRecord_result {
 public:

  Dial_addHealthRecord_result() : success((RetCode::type)0) {
  }

  virtual ~Dial_addHealthRecord_result() throw() {}

  RetCode::type success;
  Xception ex;

  _Dial_addHealthRecord_result__isset __isset;

  void __set_success(const RetCode::type val) {
    success = val;
  }

  void __set_ex(const Xception& val) {
    ex = val;
  }

  bool operator == (const Dial_addHealthRecord_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const Dial_addHealthRecord_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Dial_addHealthRecord_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Dial_addHealthRecord_presult__isset {
  _Dial_addHealthRecord_presult__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _Dial_addHealthRecord_presult__isset;

class Dial_addHealthRecord_presult {
 public:


  virtual ~Dial_addHealthRecord_presult() throw() {}

  RetCode::type* success;
  Xception ex;

  _Dial_addHealthRecord_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Dial_modHealthRecord_args__isset {
  _Dial_modHealthRecord_args__isset() : health(false), rec(false) {}
  bool health;
  bool rec;
} _Dial_modHealthRecord_args__isset;

class Dial_modHealthRecord_args {
 public:

  Dial_modHealthRecord_args() {
  }

  virtual ~Dial_modHealthRecord_args() throw() {}

  HealthGroupInfo health;
  DialRecord rec;

  _Dial_modHealthRecord_args__isset __isset;

  void __set_health(const HealthGroupInfo& val) {
    health = val;
  }

  void __set_rec(const DialRecord& val) {
    rec = val;
  }

  bool operator == (const Dial_modHealthRecord_args & rhs) const
  {
    if (!(health == rhs.health))
      return false;
    if (!(rec == rhs.rec))
      return false;
    return true;
  }
  bool operator != (const Dial_modHealthRecord_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Dial_modHealthRecord_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Dial_modHealthRecord_pargs {
 public:


  virtual ~Dial_modHealthRecord_pargs() throw() {}

  const HealthGroupInfo* health;
  const DialRecord* rec;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Dial_modHealthRecord_result__isset {
  _Dial_modHealthRecord_result__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _Dial_modHealthRecord_result__isset;

class Dial_modHealthRecord_result {
 public:

  Dial_modHealthRecord_result() : success((RetCode::type)0) {
  }

  virtual ~Dial_modHealthRecord_result() throw() {}

  RetCode::type success;
  Xception ex;

  _Dial_modHealthRecord_result__isset __isset;

  void __set_success(const RetCode::type val) {
    success = val;
  }

  void __set_ex(const Xception& val) {
    ex = val;
  }

  bool operator == (const Dial_modHealthRecord_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const Dial_modHealthRecord_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Dial_modHealthRecord_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Dial_modHealthRecord_presult__isset {
  _Dial_modHealthRecord_presult__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _Dial_modHealthRecord_presult__isset;

class Dial_modHealthRecord_presult {
 public:


  virtual ~Dial_modHealthRecord_presult() throw() {}

  RetCode::type* success;
  Xception ex;

  _Dial_modHealthRecord_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Dial_delHealthRecord_args__isset {
  _Dial_delHealthRecord_args__isset() : health(false), rec(false) {}
  bool health;
  bool rec;
} _Dial_delHealthRecord_args__isset;

class Dial_delHealthRecord_args {
 public:

  Dial_delHealthRecord_args() {
  }

  virtual ~Dial_delHealthRecord_args() throw() {}

  HealthGroupInfo health;
  DialRecord rec;

  _Dial_delHealthRecord_args__isset __isset;

  void __set_health(const HealthGroupInfo& val) {
    health = val;
  }

  void __set_rec(const DialRecord& val) {
    rec = val;
  }

  bool operator == (const Dial_delHealthRecord_args & rhs) const
  {
    if (!(health == rhs.health))
      return false;
    if (!(rec == rhs.rec))
      return false;
    return true;
  }
  bool operator != (const Dial_delHealthRecord_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Dial_delHealthRecord_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Dial_delHealthRecord_pargs {
 public:


  virtual ~Dial_delHealthRecord_pargs() throw() {}

  const HealthGroupInfo* health;
  const DialRecord* rec;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Dial_delHealthRecord_result__isset {
  _Dial_delHealthRecord_result__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _Dial_delHealthRecord_result__isset;

class Dial_delHealthRecord_result {
 public:

  Dial_delHealthRecord_result() : success((RetCode::type)0) {
  }

  virtual ~Dial_delHealthRecord_result() throw() {}

  RetCode::type success;
  Xception ex;

  _Dial_delHealthRecord_result__isset __isset;

  void __set_success(const RetCode::type val) {
    success = val;
  }

  void __set_ex(const Xception& val) {
    ex = val;
  }

  bool operator == (const Dial_delHealthRecord_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const Dial_delHealthRecord_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Dial_delHealthRecord_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Dial_delHealthRecord_presult__isset {
  _Dial_delHealthRecord_presult__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _Dial_delHealthRecord_presult__isset;

class Dial_delHealthRecord_presult {
 public:


  virtual ~Dial_delHealthRecord_presult() throw() {}

  RetCode::type* success;
  Xception ex;

  _Dial_delHealthRecord_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Dial_addHealthPolicy_args__isset {
  _Dial_addHealthPolicy_args__isset() : policy(false) {}
  bool policy;
} _Dial_addHealthPolicy_args__isset;

class Dial_addHealthPolicy_args {
 public:

  Dial_addHealthPolicy_args() {
  }

  virtual ~Dial_addHealthPolicy_args() throw() {}

  HealthPolicyInfo policy;

  _Dial_addHealthPolicy_args__isset __isset;

  void __set_policy(const HealthPolicyInfo& val) {
    policy = val;
  }

  bool operator == (const Dial_addHealthPolicy_args & rhs) const
  {
    if (!(policy == rhs.policy))
      return false;
    return true;
  }
  bool operator != (const Dial_addHealthPolicy_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Dial_addHealthPolicy_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Dial_addHealthPolicy_pargs {
 public:


  virtual ~Dial_addHealthPolicy_pargs() throw() {}

  const HealthPolicyInfo* policy;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Dial_addHealthPolicy_result__isset {
  _Dial_addHealthPolicy_result__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _Dial_addHealthPolicy_result__isset;

class Dial_addHealthPolicy_result {
 public:

  Dial_addHealthPolicy_result() : success((RetCode::type)0) {
  }

  virtual ~Dial_addHealthPolicy_result() throw() {}

  RetCode::type success;
  Xception ex;

  _Dial_addHealthPolicy_result__isset __isset;

  void __set_success(const RetCode::type val) {
    success = val;
  }

  void __set_ex(const Xception& val) {
    ex = val;
  }

  bool operator == (const Dial_addHealthPolicy_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const Dial_addHealthPolicy_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Dial_addHealthPolicy_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Dial_addHealthPolicy_presult__isset {
  _Dial_addHealthPolicy_presult__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _Dial_addHealthPolicy_presult__isset;

class Dial_addHealthPolicy_presult {
 public:


  virtual ~Dial_addHealthPolicy_presult() throw() {}

  RetCode::type* success;
  Xception ex;

  _Dial_addHealthPolicy_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Dial_modHealthPolicy_args__isset {
  _Dial_modHealthPolicy_args__isset() : policy(false) {}
  bool policy;
} _Dial_modHealthPolicy_args__isset;

class Dial_modHealthPolicy_args {
 public:

  Dial_modHealthPolicy_args() {
  }

  virtual ~Dial_modHealthPolicy_args() throw() {}

  HealthPolicyInfo policy;

  _Dial_modHealthPolicy_args__isset __isset;

  void __set_policy(const HealthPolicyInfo& val) {
    policy = val;
  }

  bool operator == (const Dial_modHealthPolicy_args & rhs) const
  {
    if (!(policy == rhs.policy))
      return false;
    return true;
  }
  bool operator != (const Dial_modHealthPolicy_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Dial_modHealthPolicy_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Dial_modHealthPolicy_pargs {
 public:


  virtual ~Dial_modHealthPolicy_pargs() throw() {}

  const HealthPolicyInfo* policy;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Dial_modHealthPolicy_result__isset {
  _Dial_modHealthPolicy_result__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _Dial_modHealthPolicy_result__isset;

class Dial_modHealthPolicy_result {
 public:

  Dial_modHealthPolicy_result() : success((RetCode::type)0) {
  }

  virtual ~Dial_modHealthPolicy_result() throw() {}

  RetCode::type success;
  Xception ex;

  _Dial_modHealthPolicy_result__isset __isset;

  void __set_success(const RetCode::type val) {
    success = val;
  }

  void __set_ex(const Xception& val) {
    ex = val;
  }

  bool operator == (const Dial_modHealthPolicy_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const Dial_modHealthPolicy_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Dial_modHealthPolicy_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Dial_modHealthPolicy_presult__isset {
  _Dial_modHealthPolicy_presult__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _Dial_modHealthPolicy_presult__isset;

class Dial_modHealthPolicy_presult {
 public:


  virtual ~Dial_modHealthPolicy_presult() throw() {}

  RetCode::type* success;
  Xception ex;

  _Dial_modHealthPolicy_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Dial_delHealthPolicy_args__isset {
  _Dial_delHealthPolicy_args__isset() : policy(false) {}
  bool policy;
} _Dial_delHealthPolicy_args__isset;

class Dial_delHealthPolicy_args {
 public:

  Dial_delHealthPolicy_args() {
  }

  virtual ~Dial_delHealthPolicy_args() throw() {}

  HealthPolicyInfo policy;

  _Dial_delHealthPolicy_args__isset __isset;

  void __set_policy(const HealthPolicyInfo& val) {
    policy = val;
  }

  bool operator == (const Dial_delHealthPolicy_args & rhs) const
  {
    if (!(policy == rhs.policy))
      return false;
    return true;
  }
  bool operator != (const Dial_delHealthPolicy_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Dial_delHealthPolicy_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Dial_delHealthPolicy_pargs {
 public:


  virtual ~Dial_delHealthPolicy_pargs() throw() {}

  const HealthPolicyInfo* policy;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Dial_delHealthPolicy_result__isset {
  _Dial_delHealthPolicy_result__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _Dial_delHealthPolicy_result__isset;

class Dial_delHealthPolicy_result {
 public:

  Dial_delHealthPolicy_result() : success((RetCode::type)0) {
  }

  virtual ~Dial_delHealthPolicy_result() throw() {}

  RetCode::type success;
  Xception ex;

  _Dial_delHealthPolicy_result__isset __isset;

  void __set_success(const RetCode::type val) {
    success = val;
  }

  void __set_ex(const Xception& val) {
    ex = val;
  }

  bool operator == (const Dial_delHealthPolicy_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const Dial_delHealthPolicy_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Dial_delHealthPolicy_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Dial_delHealthPolicy_presult__isset {
  _Dial_delHealthPolicy_presult__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _Dial_delHealthPolicy_presult__isset;

class Dial_delHealthPolicy_presult {
 public:


  virtual ~Dial_delHealthPolicy_presult() throw() {}

  RetCode::type* success;
  Xception ex;

  _Dial_delHealthPolicy_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Dial_dialServerConfig_args__isset {
  _Dial_dialServerConfig_args__isset() : typ(false), allowed(false) {}
  bool typ;
  bool allowed;
} _Dial_dialServerConfig_args__isset;

class Dial_dialServerConfig_args {
 public:

  Dial_dialServerConfig_args() : typ((DialServerType::type)0), allowed(0) {
  }

  virtual ~Dial_dialServerConfig_args() throw() {}

  DialServerType::type typ;
  bool allowed;

  _Dial_dialServerConfig_args__isset __isset;

  void __set_typ(const DialServerType::type val) {
    typ = val;
  }

  void __set_allowed(const bool val) {
    allowed = val;
  }

  bool operator == (const Dial_dialServerConfig_args & rhs) const
  {
    if (!(typ == rhs.typ))
      return false;
    if (!(allowed == rhs.allowed))
      return false;
    return true;
  }
  bool operator != (const Dial_dialServerConfig_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Dial_dialServerConfig_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Dial_dialServerConfig_pargs {
 public:


  virtual ~Dial_dialServerConfig_pargs() throw() {}

  const DialServerType::type* typ;
  const bool* allowed;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Dial_dialServerConfig_result__isset {
  _Dial_dialServerConfig_result__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _Dial_dialServerConfig_result__isset;

class Dial_dialServerConfig_result {
 public:

  Dial_dialServerConfig_result() : success((RetCode::type)0) {
  }

  virtual ~Dial_dialServerConfig_result() throw() {}

  RetCode::type success;
  Xception ex;

  _Dial_dialServerConfig_result__isset __isset;

  void __set_success(const RetCode::type val) {
    success = val;
  }

  void __set_ex(const Xception& val) {
    ex = val;
  }

  bool operator == (const Dial_dialServerConfig_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const Dial_dialServerConfig_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Dial_dialServerConfig_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Dial_dialServerConfig_presult__isset {
  _Dial_dialServerConfig_presult__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _Dial_dialServerConfig_presult__isset;

class Dial_dialServerConfig_presult {
 public:


  virtual ~Dial_dialServerConfig_presult() throw() {}

  RetCode::type* success;
  Xception ex;

  _Dial_dialServerConfig_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Dial_addDialServer_args__isset {
  _Dial_addDialServer_args__isset() : ip(false), typ(false) {}
  bool ip;
  bool typ;
} _Dial_addDialServer_args__isset;

class Dial_addDialServer_args {
 public:

  Dial_addDialServer_args() : typ((DialServerType::type)0) {
  }

  virtual ~Dial_addDialServer_args() throw() {}

  IpAddr ip;
  DialServerType::type typ;

  _Dial_addDialServer_args__isset __isset;

  void __set_ip(const IpAddr& val) {
    ip = val;
  }

  void __set_typ(const DialServerType::type val) {
    typ = val;
  }

  bool operator == (const Dial_addDialServer_args & rhs) const
  {
    if (!(ip == rhs.ip))
      return false;
    if (!(typ == rhs.typ))
      return false;
    return true;
  }
  bool operator != (const Dial_addDialServer_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Dial_addDialServer_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Dial_addDialServer_pargs {
 public:


  virtual ~Dial_addDialServer_pargs() throw() {}

  const IpAddr* ip;
  const DialServerType::type* typ;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Dial_addDialServer_result__isset {
  _Dial_addDialServer_result__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _Dial_addDialServer_result__isset;

class Dial_addDialServer_result {
 public:

  Dial_addDialServer_result() : success((RetCode::type)0) {
  }

  virtual ~Dial_addDialServer_result() throw() {}

  RetCode::type success;
  Xception ex;

  _Dial_addDialServer_result__isset __isset;

  void __set_success(const RetCode::type val) {
    success = val;
  }

  void __set_ex(const Xception& val) {
    ex = val;
  }

  bool operator == (const Dial_addDialServer_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const Dial_addDialServer_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Dial_addDialServer_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Dial_addDialServer_presult__isset {
  _Dial_addDialServer_presult__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _Dial_addDialServer_presult__isset;

class Dial_addDialServer_presult {
 public:


  virtual ~Dial_addDialServer_presult() throw() {}

  RetCode::type* success;
  Xception ex;

  _Dial_addDialServer_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Dial_delDialServer_args__isset {
  _Dial_delDialServer_args__isset() : ip(false), typ(false) {}
  bool ip;
  bool typ;
} _Dial_delDialServer_args__isset;

class Dial_delDialServer_args {
 public:

  Dial_delDialServer_args() : typ((DialServerType::type)0) {
  }

  virtual ~Dial_delDialServer_args() throw() {}

  IpAddr ip;
  DialServerType::type typ;

  _Dial_delDialServer_args__isset __isset;

  void __set_ip(const IpAddr& val) {
    ip = val;
  }

  void __set_typ(const DialServerType::type val) {
    typ = val;
  }

  bool operator == (const Dial_delDialServer_args & rhs) const
  {
    if (!(ip == rhs.ip))
      return false;
    if (!(typ == rhs.typ))
      return false;
    return true;
  }
  bool operator != (const Dial_delDialServer_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Dial_delDialServer_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Dial_delDialServer_pargs {
 public:


  virtual ~Dial_delDialServer_pargs() throw() {}

  const IpAddr* ip;
  const DialServerType::type* typ;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Dial_delDialServer_result__isset {
  _Dial_delDialServer_result__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _Dial_delDialServer_result__isset;

class Dial_delDialServer_result {
 public:

  Dial_delDialServer_result() : success((RetCode::type)0) {
  }

  virtual ~Dial_delDialServer_result() throw() {}

  RetCode::type success;
  Xception ex;

  _Dial_delDialServer_result__isset __isset;

  void __set_success(const RetCode::type val) {
    success = val;
  }

  void __set_ex(const Xception& val) {
    ex = val;
  }

  bool operator == (const Dial_delDialServer_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const Dial_delDialServer_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Dial_delDialServer_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Dial_delDialServer_presult__isset {
  _Dial_delDialServer_presult__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _Dial_delDialServer_presult__isset;

class Dial_delDialServer_presult {
 public:


  virtual ~Dial_delDialServer_presult() throw() {}

  RetCode::type* success;
  Xception ex;

  _Dial_delDialServer_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Dial_addNginxGroup_args__isset {
  _Dial_addNginxGroup_args__isset() : groupName(false), policyName(false) {}
  bool groupName;
  bool policyName;
} _Dial_addNginxGroup_args__isset;

class Dial_addNginxGroup_args {
 public:

  Dial_addNginxGroup_args() : groupName(), policyName() {
  }

  virtual ~Dial_addNginxGroup_args() throw() {}

  std::string groupName;
  std::string policyName;

  _Dial_addNginxGroup_args__isset __isset;

  void __set_groupName(const std::string& val) {
    groupName = val;
  }

  void __set_policyName(const std::string& val) {
    policyName = val;
  }

  bool operator == (const Dial_addNginxGroup_args & rhs) const
  {
    if (!(groupName == rhs.groupName))
      return false;
    if (!(policyName == rhs.policyName))
      return false;
    return true;
  }
  bool operator != (const Dial_addNginxGroup_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Dial_addNginxGroup_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Dial_addNginxGroup_pargs {
 public:


  virtual ~Dial_addNginxGroup_pargs() throw() {}

  const std::string* groupName;
  const std::string* policyName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Dial_addNginxGroup_result__isset {
  _Dial_addNginxGroup_result__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _Dial_addNginxGroup_result__isset;

class Dial_addNginxGroup_result {
 public:

  Dial_addNginxGroup_result() : success((RetCode::type)0) {
  }

  virtual ~Dial_addNginxGroup_result() throw() {}

  RetCode::type success;
  Xception ex;

  _Dial_addNginxGroup_result__isset __isset;

  void __set_success(const RetCode::type val) {
    success = val;
  }

  void __set_ex(const Xception& val) {
    ex = val;
  }

  bool operator == (const Dial_addNginxGroup_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const Dial_addNginxGroup_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Dial_addNginxGroup_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Dial_addNginxGroup_presult__isset {
  _Dial_addNginxGroup_presult__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _Dial_addNginxGroup_presult__isset;

class Dial_addNginxGroup_presult {
 public:


  virtual ~Dial_addNginxGroup_presult() throw() {}

  RetCode::type* success;
  Xception ex;

  _Dial_addNginxGroup_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Dial_delNginxGroup_args__isset {
  _Dial_delNginxGroup_args__isset() : groupName(false), policyName(false) {}
  bool groupName;
  bool policyName;
} _Dial_delNginxGroup_args__isset;

class Dial_delNginxGroup_args {
 public:

  Dial_delNginxGroup_args() : groupName(), policyName() {
  }

  virtual ~Dial_delNginxGroup_args() throw() {}

  std::string groupName;
  std::string policyName;

  _Dial_delNginxGroup_args__isset __isset;

  void __set_groupName(const std::string& val) {
    groupName = val;
  }

  void __set_policyName(const std::string& val) {
    policyName = val;
  }

  bool operator == (const Dial_delNginxGroup_args & rhs) const
  {
    if (!(groupName == rhs.groupName))
      return false;
    if (!(policyName == rhs.policyName))
      return false;
    return true;
  }
  bool operator != (const Dial_delNginxGroup_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Dial_delNginxGroup_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Dial_delNginxGroup_pargs {
 public:


  virtual ~Dial_delNginxGroup_pargs() throw() {}

  const std::string* groupName;
  const std::string* policyName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Dial_delNginxGroup_result__isset {
  _Dial_delNginxGroup_result__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _Dial_delNginxGroup_result__isset;

class Dial_delNginxGroup_result {
 public:

  Dial_delNginxGroup_result() : success((RetCode::type)0) {
  }

  virtual ~Dial_delNginxGroup_result() throw() {}

  RetCode::type success;
  Xception ex;

  _Dial_delNginxGroup_result__isset __isset;

  void __set_success(const RetCode::type val) {
    success = val;
  }

  void __set_ex(const Xception& val) {
    ex = val;
  }

  bool operator == (const Dial_delNginxGroup_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const Dial_delNginxGroup_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Dial_delNginxGroup_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Dial_delNginxGroup_presult__isset {
  _Dial_delNginxGroup_presult__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _Dial_delNginxGroup_presult__isset;

class Dial_delNginxGroup_presult {
 public:


  virtual ~Dial_delNginxGroup_presult() throw() {}

  RetCode::type* success;
  Xception ex;

  _Dial_delNginxGroup_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Dial_addNginxServer_args__isset {
  _Dial_addNginxServer_args__isset() : groupName(false), server(false) {}
  bool groupName;
  bool server;
} _Dial_addNginxServer_args__isset;

class Dial_addNginxServer_args {
 public:

  Dial_addNginxServer_args() : groupName() {
  }

  virtual ~Dial_addNginxServer_args() throw() {}

  std::string groupName;
  DialNginxServer server;

  _Dial_addNginxServer_args__isset __isset;

  void __set_groupName(const std::string& val) {
    groupName = val;
  }

  void __set_server(const DialNginxServer& val) {
    server = val;
  }

  bool operator == (const Dial_addNginxServer_args & rhs) const
  {
    if (!(groupName == rhs.groupName))
      return false;
    if (!(server == rhs.server))
      return false;
    return true;
  }
  bool operator != (const Dial_addNginxServer_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Dial_addNginxServer_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Dial_addNginxServer_pargs {
 public:


  virtual ~Dial_addNginxServer_pargs() throw() {}

  const std::string* groupName;
  const DialNginxServer* server;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Dial_addNginxServer_result__isset {
  _Dial_addNginxServer_result__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _Dial_addNginxServer_result__isset;

class Dial_addNginxServer_result {
 public:

  Dial_addNginxServer_result() : success((RetCode::type)0) {
  }

  virtual ~Dial_addNginxServer_result() throw() {}

  RetCode::type success;
  Xception ex;

  _Dial_addNginxServer_result__isset __isset;

  void __set_success(const RetCode::type val) {
    success = val;
  }

  void __set_ex(const Xception& val) {
    ex = val;
  }

  bool operator == (const Dial_addNginxServer_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const Dial_addNginxServer_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Dial_addNginxServer_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Dial_addNginxServer_presult__isset {
  _Dial_addNginxServer_presult__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _Dial_addNginxServer_presult__isset;

class Dial_addNginxServer_presult {
 public:


  virtual ~Dial_addNginxServer_presult() throw() {}

  RetCode::type* success;
  Xception ex;

  _Dial_addNginxServer_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Dial_modNginxServer_args__isset {
  _Dial_modNginxServer_args__isset() : groupName(false), server(false) {}
  bool groupName;
  bool server;
} _Dial_modNginxServer_args__isset;

class Dial_modNginxServer_args {
 public:

  Dial_modNginxServer_args() : groupName() {
  }

  virtual ~Dial_modNginxServer_args() throw() {}

  std::string groupName;
  DialNginxServer server;

  _Dial_modNginxServer_args__isset __isset;

  void __set_groupName(const std::string& val) {
    groupName = val;
  }

  void __set_server(const DialNginxServer& val) {
    server = val;
  }

  bool operator == (const Dial_modNginxServer_args & rhs) const
  {
    if (!(groupName == rhs.groupName))
      return false;
    if (!(server == rhs.server))
      return false;
    return true;
  }
  bool operator != (const Dial_modNginxServer_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Dial_modNginxServer_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Dial_modNginxServer_pargs {
 public:


  virtual ~Dial_modNginxServer_pargs() throw() {}

  const std::string* groupName;
  const DialNginxServer* server;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Dial_modNginxServer_result__isset {
  _Dial_modNginxServer_result__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _Dial_modNginxServer_result__isset;

class Dial_modNginxServer_result {
 public:

  Dial_modNginxServer_result() : success((RetCode::type)0) {
  }

  virtual ~Dial_modNginxServer_result() throw() {}

  RetCode::type success;
  Xception ex;

  _Dial_modNginxServer_result__isset __isset;

  void __set_success(const RetCode::type val) {
    success = val;
  }

  void __set_ex(const Xception& val) {
    ex = val;
  }

  bool operator == (const Dial_modNginxServer_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const Dial_modNginxServer_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Dial_modNginxServer_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Dial_modNginxServer_presult__isset {
  _Dial_modNginxServer_presult__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _Dial_modNginxServer_presult__isset;

class Dial_modNginxServer_presult {
 public:


  virtual ~Dial_modNginxServer_presult() throw() {}

  RetCode::type* success;
  Xception ex;

  _Dial_modNginxServer_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Dial_delNginxServer_args__isset {
  _Dial_delNginxServer_args__isset() : groupName(false), server(false) {}
  bool groupName;
  bool server;
} _Dial_delNginxServer_args__isset;

class Dial_delNginxServer_args {
 public:

  Dial_delNginxServer_args() : groupName() {
  }

  virtual ~Dial_delNginxServer_args() throw() {}

  std::string groupName;
  DialNginxServer server;

  _Dial_delNginxServer_args__isset __isset;

  void __set_groupName(const std::string& val) {
    groupName = val;
  }

  void __set_server(const DialNginxServer& val) {
    server = val;
  }

  bool operator == (const Dial_delNginxServer_args & rhs) const
  {
    if (!(groupName == rhs.groupName))
      return false;
    if (!(server == rhs.server))
      return false;
    return true;
  }
  bool operator != (const Dial_delNginxServer_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Dial_delNginxServer_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Dial_delNginxServer_pargs {
 public:


  virtual ~Dial_delNginxServer_pargs() throw() {}

  const std::string* groupName;
  const DialNginxServer* server;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Dial_delNginxServer_result__isset {
  _Dial_delNginxServer_result__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _Dial_delNginxServer_result__isset;

class Dial_delNginxServer_result {
 public:

  Dial_delNginxServer_result() : success((RetCode::type)0) {
  }

  virtual ~Dial_delNginxServer_result() throw() {}

  RetCode::type success;
  Xception ex;

  _Dial_delNginxServer_result__isset __isset;

  void __set_success(const RetCode::type val) {
    success = val;
  }

  void __set_ex(const Xception& val) {
    ex = val;
  }

  bool operator == (const Dial_delNginxServer_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const Dial_delNginxServer_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Dial_delNginxServer_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Dial_delNginxServer_presult__isset {
  _Dial_delNginxServer_presult__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _Dial_delNginxServer_presult__isset;

class Dial_delNginxServer_presult {
 public:


  virtual ~Dial_delNginxServer_presult() throw() {}

  RetCode::type* success;
  Xception ex;

  _Dial_delNginxServer_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Dial_heartBeat_args {
 public:

  Dial_heartBeat_args() {
  }

  virtual ~Dial_heartBeat_args() throw() {}


  bool operator == (const Dial_heartBeat_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Dial_heartBeat_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Dial_heartBeat_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Dial_heartBeat_pargs {
 public:


  virtual ~Dial_heartBeat_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Dial_heartBeat_result__isset {
  _Dial_heartBeat_result__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _Dial_heartBeat_result__isset;

class Dial_heartBeat_result {
 public:

  Dial_heartBeat_result() {
  }

  virtual ~Dial_heartBeat_result() throw() {}

  HeartBeatState success;
  Xception ex;

  _Dial_heartBeat_result__isset __isset;

  void __set_success(const HeartBeatState& val) {
    success = val;
  }

  void __set_ex(const Xception& val) {
    ex = val;
  }

  bool operator == (const Dial_heartBeat_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const Dial_heartBeat_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Dial_heartBeat_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Dial_heartBeat_presult__isset {
  _Dial_heartBeat_presult__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _Dial_heartBeat_presult__isset;

class Dial_heartBeat_presult {
 public:


  virtual ~Dial_heartBeat_presult() throw() {}

  HeartBeatState* success;
  Xception ex;

  _Dial_heartBeat_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Dial_setServerState_args__isset {
  _Dial_setServerState_args__isset() : enable(false) {}
  bool enable;
} _Dial_setServerState_args__isset;

class Dial_setServerState_args {
 public:

  Dial_setServerState_args() : enable(0) {
  }

  virtual ~Dial_setServerState_args() throw() {}

  bool enable;

  _Dial_setServerState_args__isset __isset;

  void __set_enable(const bool val) {
    enable = val;
  }

  bool operator == (const Dial_setServerState_args & rhs) const
  {
    if (!(enable == rhs.enable))
      return false;
    return true;
  }
  bool operator != (const Dial_setServerState_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Dial_setServerState_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Dial_setServerState_pargs {
 public:


  virtual ~Dial_setServerState_pargs() throw() {}

  const bool* enable;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Dial_setServerState_result__isset {
  _Dial_setServerState_result__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _Dial_setServerState_result__isset;

class Dial_setServerState_result {
 public:

  Dial_setServerState_result() : success((RetCode::type)0) {
  }

  virtual ~Dial_setServerState_result() throw() {}

  RetCode::type success;
  Xception ex;

  _Dial_setServerState_result__isset __isset;

  void __set_success(const RetCode::type val) {
    success = val;
  }

  void __set_ex(const Xception& val) {
    ex = val;
  }

  bool operator == (const Dial_setServerState_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const Dial_setServerState_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Dial_setServerState_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Dial_setServerState_presult__isset {
  _Dial_setServerState_presult__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _Dial_setServerState_presult__isset;

class Dial_setServerState_presult {
 public:


  virtual ~Dial_setServerState_presult() throw() {}

  RetCode::type* success;
  Xception ex;

  _Dial_setServerState_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class DialClient : virtual public DialIf {
 public:
  DialClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  DialClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  RetCode::type systemCommand(const SysCommand::type cmdType);
  void send_systemCommand(const SysCommand::type cmdType);
  RetCode::type recv_systemCommand();
  RetCode::type addHealthGroup(const HealthGroupInfo& health, const std::string& policyName);
  void send_addHealthGroup(const HealthGroupInfo& health, const std::string& policyName);
  RetCode::type recv_addHealthGroup();
  RetCode::type delHealthGroup(const HealthGroupInfo& health, const std::string& policyName);
  void send_delHealthGroup(const HealthGroupInfo& health, const std::string& policyName);
  RetCode::type recv_delHealthGroup();
  RetCode::type addHealthRecord(const HealthGroupInfo& health, const DialRecord& rec);
  void send_addHealthRecord(const HealthGroupInfo& health, const DialRecord& rec);
  RetCode::type recv_addHealthRecord();
  RetCode::type modHealthRecord(const HealthGroupInfo& health, const DialRecord& rec);
  void send_modHealthRecord(const HealthGroupInfo& health, const DialRecord& rec);
  RetCode::type recv_modHealthRecord();
  RetCode::type delHealthRecord(const HealthGroupInfo& health, const DialRecord& rec);
  void send_delHealthRecord(const HealthGroupInfo& health, const DialRecord& rec);
  RetCode::type recv_delHealthRecord();
  RetCode::type addHealthPolicy(const HealthPolicyInfo& policy);
  void send_addHealthPolicy(const HealthPolicyInfo& policy);
  RetCode::type recv_addHealthPolicy();
  RetCode::type modHealthPolicy(const HealthPolicyInfo& policy);
  void send_modHealthPolicy(const HealthPolicyInfo& policy);
  RetCode::type recv_modHealthPolicy();
  RetCode::type delHealthPolicy(const HealthPolicyInfo& policy);
  void send_delHealthPolicy(const HealthPolicyInfo& policy);
  RetCode::type recv_delHealthPolicy();
  RetCode::type dialServerConfig(const DialServerType::type typ, const bool allowed);
  void send_dialServerConfig(const DialServerType::type typ, const bool allowed);
  RetCode::type recv_dialServerConfig();
  RetCode::type addDialServer(const IpAddr& ip, const DialServerType::type typ);
  void send_addDialServer(const IpAddr& ip, const DialServerType::type typ);
  RetCode::type recv_addDialServer();
  RetCode::type delDialServer(const IpAddr& ip, const DialServerType::type typ);
  void send_delDialServer(const IpAddr& ip, const DialServerType::type typ);
  RetCode::type recv_delDialServer();
  RetCode::type addNginxGroup(const std::string& groupName, const std::string& policyName);
  void send_addNginxGroup(const std::string& groupName, const std::string& policyName);
  RetCode::type recv_addNginxGroup();
  RetCode::type delNginxGroup(const std::string& groupName, const std::string& policyName);
  void send_delNginxGroup(const std::string& groupName, const std::string& policyName);
  RetCode::type recv_delNginxGroup();
  RetCode::type addNginxServer(const std::string& groupName, const DialNginxServer& server);
  void send_addNginxServer(const std::string& groupName, const DialNginxServer& server);
  RetCode::type recv_addNginxServer();
  RetCode::type modNginxServer(const std::string& groupName, const DialNginxServer& server);
  void send_modNginxServer(const std::string& groupName, const DialNginxServer& server);
  RetCode::type recv_modNginxServer();
  RetCode::type delNginxServer(const std::string& groupName, const DialNginxServer& server);
  void send_delNginxServer(const std::string& groupName, const DialNginxServer& server);
  RetCode::type recv_delNginxServer();
  void heartBeat(HeartBeatState& _return);
  void send_heartBeat();
  void recv_heartBeat(HeartBeatState& _return);
  RetCode::type setServerState(const bool enable);
  void send_setServerState(const bool enable);
  RetCode::type recv_setServerState();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class DialProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<DialIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (DialProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_systemCommand(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addHealthGroup(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_delHealthGroup(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addHealthRecord(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_modHealthRecord(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_delHealthRecord(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addHealthPolicy(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_modHealthPolicy(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_delHealthPolicy(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_dialServerConfig(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addDialServer(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_delDialServer(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addNginxGroup(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_delNginxGroup(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addNginxServer(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_modNginxServer(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_delNginxServer(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_heartBeat(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setServerState(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  DialProcessor(boost::shared_ptr<DialIf> iface) :
    iface_(iface) {
    processMap_["systemCommand"] = &DialProcessor::process_systemCommand;
    processMap_["addHealthGroup"] = &DialProcessor::process_addHealthGroup;
    processMap_["delHealthGroup"] = &DialProcessor::process_delHealthGroup;
    processMap_["addHealthRecord"] = &DialProcessor::process_addHealthRecord;
    processMap_["modHealthRecord"] = &DialProcessor::process_modHealthRecord;
    processMap_["delHealthRecord"] = &DialProcessor::process_delHealthRecord;
    processMap_["addHealthPolicy"] = &DialProcessor::process_addHealthPolicy;
    processMap_["modHealthPolicy"] = &DialProcessor::process_modHealthPolicy;
    processMap_["delHealthPolicy"] = &DialProcessor::process_delHealthPolicy;
    processMap_["dialServerConfig"] = &DialProcessor::process_dialServerConfig;
    processMap_["addDialServer"] = &DialProcessor::process_addDialServer;
    processMap_["delDialServer"] = &DialProcessor::process_delDialServer;
    processMap_["addNginxGroup"] = &DialProcessor::process_addNginxGroup;
    processMap_["delNginxGroup"] = &DialProcessor::process_delNginxGroup;
    processMap_["addNginxServer"] = &DialProcessor::process_addNginxServer;
    processMap_["modNginxServer"] = &DialProcessor::process_modNginxServer;
    processMap_["delNginxServer"] = &DialProcessor::process_delNginxServer;
    processMap_["heartBeat"] = &DialProcessor::process_heartBeat;
    processMap_["setServerState"] = &DialProcessor::process_setServerState;
  }

  virtual ~DialProcessor() {}
};

class DialProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  DialProcessorFactory(const ::boost::shared_ptr< DialIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< DialIfFactory > handlerFactory_;
};

class DialMultiface : virtual public DialIf {
 public:
  DialMultiface(std::vector<boost::shared_ptr<DialIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~DialMultiface() {}
 protected:
  std::vector<boost::shared_ptr<DialIf> > ifaces_;
  DialMultiface() {}
  void add(boost::shared_ptr<DialIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  RetCode::type systemCommand(const SysCommand::type cmdType) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->systemCommand(cmdType);
    }
    return ifaces_[i]->systemCommand(cmdType);
  }

  RetCode::type addHealthGroup(const HealthGroupInfo& health, const std::string& policyName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addHealthGroup(health, policyName);
    }
    return ifaces_[i]->addHealthGroup(health, policyName);
  }

  RetCode::type delHealthGroup(const HealthGroupInfo& health, const std::string& policyName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->delHealthGroup(health, policyName);
    }
    return ifaces_[i]->delHealthGroup(health, policyName);
  }

  RetCode::type addHealthRecord(const HealthGroupInfo& health, const DialRecord& rec) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addHealthRecord(health, rec);
    }
    return ifaces_[i]->addHealthRecord(health, rec);
  }

  RetCode::type modHealthRecord(const HealthGroupInfo& health, const DialRecord& rec) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->modHealthRecord(health, rec);
    }
    return ifaces_[i]->modHealthRecord(health, rec);
  }

  RetCode::type delHealthRecord(const HealthGroupInfo& health, const DialRecord& rec) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->delHealthRecord(health, rec);
    }
    return ifaces_[i]->delHealthRecord(health, rec);
  }

  RetCode::type addHealthPolicy(const HealthPolicyInfo& policy) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addHealthPolicy(policy);
    }
    return ifaces_[i]->addHealthPolicy(policy);
  }

  RetCode::type modHealthPolicy(const HealthPolicyInfo& policy) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->modHealthPolicy(policy);
    }
    return ifaces_[i]->modHealthPolicy(policy);
  }

  RetCode::type delHealthPolicy(const HealthPolicyInfo& policy) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->delHealthPolicy(policy);
    }
    return ifaces_[i]->delHealthPolicy(policy);
  }

  RetCode::type dialServerConfig(const DialServerType::type typ, const bool allowed) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->dialServerConfig(typ, allowed);
    }
    return ifaces_[i]->dialServerConfig(typ, allowed);
  }

  RetCode::type addDialServer(const IpAddr& ip, const DialServerType::type typ) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addDialServer(ip, typ);
    }
    return ifaces_[i]->addDialServer(ip, typ);
  }

  RetCode::type delDialServer(const IpAddr& ip, const DialServerType::type typ) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->delDialServer(ip, typ);
    }
    return ifaces_[i]->delDialServer(ip, typ);
  }

  RetCode::type addNginxGroup(const std::string& groupName, const std::string& policyName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addNginxGroup(groupName, policyName);
    }
    return ifaces_[i]->addNginxGroup(groupName, policyName);
  }

  RetCode::type delNginxGroup(const std::string& groupName, const std::string& policyName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->delNginxGroup(groupName, policyName);
    }
    return ifaces_[i]->delNginxGroup(groupName, policyName);
  }

  RetCode::type addNginxServer(const std::string& groupName, const DialNginxServer& server) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addNginxServer(groupName, server);
    }
    return ifaces_[i]->addNginxServer(groupName, server);
  }

  RetCode::type modNginxServer(const std::string& groupName, const DialNginxServer& server) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->modNginxServer(groupName, server);
    }
    return ifaces_[i]->modNginxServer(groupName, server);
  }

  RetCode::type delNginxServer(const std::string& groupName, const DialNginxServer& server) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->delNginxServer(groupName, server);
    }
    return ifaces_[i]->delNginxServer(groupName, server);
  }

  void heartBeat(HeartBeatState& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->heartBeat(_return);
    }
    ifaces_[i]->heartBeat(_return);
    return;
  }

  RetCode::type setServerState(const bool enable) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setServerState(enable);
    }
    return ifaces_[i]->setServerState(enable);
  }

};

}}} // namespace

#endif
