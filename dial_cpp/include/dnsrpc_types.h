/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef dnsrpc_TYPES_H
#define dnsrpc_TYPES_H

#include "thrift/Thrift.h"
#include "thrift/TApplicationException.h"
#include "thrift/protocol/TProtocol.h"
#include "thrift/transport/TTransport.h"



namespace rpc { namespace yamutech { namespace com {

struct ModuleType {
  enum type {
    CRM = 1,
    DIALING = 2
  };
};

extern const std::map<int, const char*> _ModuleType_VALUES_TO_NAMES;

struct LogLevel {
  enum type {
    NORMAL = 0,
    WARN = 1,
    ERROR = 2
  };
};

extern const std::map<int, const char*> _LogLevel_VALUES_TO_NAMES;

struct DialStatus {
  enum type {
    OK = 0,
    FAIL = 1
  };
};

extern const std::map<int, const char*> _DialStatus_VALUES_TO_NAMES;

struct RetCode {
  enum type {
    OK = 0,
    FAIL = 1
  };
};

extern const std::map<int, const char*> _RetCode_VALUES_TO_NAMES;

struct SecParamName {
  enum type {
    SEC_PARAM_WHITELIST = 0,
    SEC_PARAM_ACL = 1,
    SEC_PARAM_QPSLIMIT = 2,
    SEC_PARAM_BLACKLIST = 3,
    SEC_PARAM_TCP = 4,
    SEC_PARAM_TCPLIMIT = 5,
    SEC_PARAM_ICMPLIMIT = 6,
    SEC_PARAM_CACHEVIRUSLIMIT = 7,
    SEC_PARAM_FILTERIP = 8,
    SEC_PARAM_FILTERUDP = 9,
    SEC_PARAM_FILTERDNS = 10,
    SEC_PARAM_DDOSDEFEND = 11,
    SEC_PARAM_DNSFLOODDEFND = 12
  };
};

extern const std::map<int, const char*> _SecParamName_VALUES_TO_NAMES;

struct DnsParamName {
  enum type {
    DNS_PARAM_AUTH = 0,
    DNS_PARAM_XFORWARD = 1,
    DNS_PARAM_TTL = 2,
    DNS_PARAM_REDIRECT = 3,
    DNS_PARAM_SPREAD = 4,
    DNS_PARAM_RECUSIVE = 5,
    DNS_PARAM_CACHE = 6
  };
};

extern const std::map<int, const char*> _DnsParamName_VALUES_TO_NAMES;

struct Status {
  enum type {
    STATUS_INACTIVE = 0,
    STATUS_ACTIVE = 1
  };
};

extern const std::map<int, const char*> _Status_VALUES_TO_NAMES;

struct DialMethod {
  enum type {
    DIAL_TCPPORT = 0,
    DIAL_IMCP = 1,
    DIAL_HTTPGET = 2,
    DIAL_DATABASE = 3,
    DIAL_EXTHTTPGET = 4
  };
};

extern const std::map<int, const char*> _DialMethod_VALUES_TO_NAMES;

struct AlarmStatus {
  enum type {
    ALARM_OFF = 0,
    ALARM_ON = 1
  };
};

extern const std::map<int, const char*> _AlarmStatus_VALUES_TO_NAMES;

struct AlarmType {
  enum type {
    DNSysDeviceQpsOverAlarm = 0,
    DNSysDeviceRequestIpOverAlarm = 1,
    DNSysDeviceDomainQpsOverAlarm = 2,
    DNSysDeviceDnameQpsOverAlarm = 3,
    DNSysDeviceFocusDomainAlarm = 4,
    DeviceCpuUsageAlarm = 5,
    DeviceMemoryUsageAlarm = 6,
    DevicePartitionUsageAlarm = 7,
    DeviceNicFlowOverAlarm = 8,
    NoneDeviceConnectionAlarm = 9,
    DeviceProcessAlarm = 10,
    DNSysDeviceServfailOverAlarm = 11,
    ForwardFailAlarm = 12,
    ProxyFailAlarm = 13,
    ServiceFailAlarm = 14,
    DiskFailAlarm = 15,
    LogAlarm = 16,
    RecordialFailAlarm = 17,
    RedirectFailAlarm = 18,
    NginxServerFailAlarm = 19,
    DhcpPoolAlarm = 20,
    DhcpIpAddressConflictsAlarm = 21,
    DhcpQpsAlarm = 22,
    DhcpIlegalServerAlarm = 23,
    DDNSAlarm = 24,
    HostHaAlarm = 25
  };
};

extern const std::map<int, const char*> _AlarmType_VALUES_TO_NAMES;

struct ModuleState {
  enum type {
    STARTUP = 0,
    REGISTERED = 1
  };
};

extern const std::map<int, const char*> _ModuleState_VALUES_TO_NAMES;

struct SysCommand {
  enum type {
    RestoreConfig = 0
  };
};

extern const std::map<int, const char*> _SysCommand_VALUES_TO_NAMES;

struct DialServerType {
  enum type {
    XPROXY = 0,
    REDIRECT = 1,
    XFORWARD = 2
  };
};

extern const std::map<int, const char*> _DialServerType_VALUES_TO_NAMES;

struct RecordType {
  enum type {
    A = 0,
    AAAA = 1,
    NS = 2,
    CNAME = 3,
    PTR = 4,
    TXT = 5,
    SRV = 6,
    NAPTR = 7,
    MX = 8
  };
};

extern const std::map<int, const char*> _RecordType_VALUES_TO_NAMES;

struct DNameType {
  enum type {
    DNAME_NONE = 0,
    DNAME_WHOLE = 1,
    DNAME_PREFIX = 2,
    DNAME_POSTFIX = 3
  };
};

extern const std::map<int, const char*> _DNameType_VALUES_TO_NAMES;

typedef std::string ObjectId;

typedef struct _Xception__isset {
  _Xception__isset() : errorCode(false), message(false) {}
  bool errorCode;
  bool message;
} _Xception__isset;

class Xception : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "3F5FC93B338687BC7235B1AB103F47B3";
  static const uint8_t binary_fingerprint[16]; // = {0x3F,0x5F,0xC9,0x3B,0x33,0x86,0x87,0xBC,0x72,0x35,0xB1,0xAB,0x10,0x3F,0x47,0xB3};

  Xception() : errorCode(0), message() {
  }

  virtual ~Xception() throw() {}

  int32_t errorCode;
  std::string message;

  _Xception__isset __isset;

  void __set_errorCode(const int32_t val) {
    errorCode = val;
  }

  void __set_message(const std::string& val) {
    message = val;
  }

  bool operator == (const Xception & rhs) const
  {
    if (!(errorCode == rhs.errorCode))
      return false;
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const Xception &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Xception & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Xception &a, Xception &b);

typedef struct _RetRecord__isset {
  _RetRecord__isset() : recordId(false), code(false) {}
  bool recordId;
  bool code;
} _RetRecord__isset;

class RetRecord {
 public:

  static const char* ascii_fingerprint; // = "D6FD826D949221396F4FFC3ECCD3D192";
  static const uint8_t binary_fingerprint[16]; // = {0xD6,0xFD,0x82,0x6D,0x94,0x92,0x21,0x39,0x6F,0x4F,0xFC,0x3E,0xCC,0xD3,0xD1,0x92};

  RetRecord() : recordId(), code((RetCode::type)0) {
  }

  virtual ~RetRecord() throw() {}

  std::string recordId;
  RetCode::type code;

  _RetRecord__isset __isset;

  void __set_recordId(const std::string& val) {
    recordId = val;
  }

  void __set_code(const RetCode::type val) {
    code = val;
  }

  bool operator == (const RetRecord & rhs) const
  {
    if (!(recordId == rhs.recordId))
      return false;
    if (!(code == rhs.code))
      return false;
    return true;
  }
  bool operator != (const RetRecord &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RetRecord & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RetRecord &a, RetRecord &b);

typedef struct _IpAddr__isset {
  _IpAddr__isset() : version(false), addr(false) {}
  bool version;
  bool addr;
} _IpAddr__isset;

class IpAddr {
 public:

  static const char* ascii_fingerprint; // = "3F5FC93B338687BC7235B1AB103F47B3";
  static const uint8_t binary_fingerprint[16]; // = {0x3F,0x5F,0xC9,0x3B,0x33,0x86,0x87,0xBC,0x72,0x35,0xB1,0xAB,0x10,0x3F,0x47,0xB3};

  IpAddr() : version(0), addr() {
  }

  virtual ~IpAddr() throw() {}

  int32_t version;
  std::string addr;

  _IpAddr__isset __isset;

  void __set_version(const int32_t val) {
    version = val;
  }

  void __set_addr(const std::string& val) {
    addr = val;
  }

  bool operator == (const IpAddr & rhs) const
  {
    if (!(version == rhs.version))
      return false;
    if (!(addr == rhs.addr))
      return false;
    return true;
  }
  bool operator != (const IpAddr &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IpAddr & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(IpAddr &a, IpAddr &b);

typedef struct _DialNginxServer__isset {
  _DialNginxServer__isset() : localURL(false), priority(false) {}
  bool localURL;
  bool priority;
} _DialNginxServer__isset;

class DialNginxServer {
 public:

  static const char* ascii_fingerprint; // = "EEBC915CE44901401D881E6091423036";
  static const uint8_t binary_fingerprint[16]; // = {0xEE,0xBC,0x91,0x5C,0xE4,0x49,0x01,0x40,0x1D,0x88,0x1E,0x60,0x91,0x42,0x30,0x36};

  DialNginxServer() : localURL(), priority(0) {
  }

  virtual ~DialNginxServer() throw() {}

  std::string localURL;
  int32_t priority;

  _DialNginxServer__isset __isset;

  void __set_localURL(const std::string& val) {
    localURL = val;
  }

  void __set_priority(const int32_t val) {
    priority = val;
  }

  bool operator == (const DialNginxServer & rhs) const
  {
    if (!(localURL == rhs.localURL))
      return false;
    if (!(priority == rhs.priority))
      return false;
    return true;
  }
  bool operator != (const DialNginxServer &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DialNginxServer & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(DialNginxServer &a, DialNginxServer &b);

typedef struct _DialRecordStatus__isset {
  _DialRecordStatus__isset() : rid(false), status(false) {}
  bool rid;
  bool status;
} _DialRecordStatus__isset;

class DialRecordStatus {
 public:

  static const char* ascii_fingerprint; // = "D6FD826D949221396F4FFC3ECCD3D192";
  static const uint8_t binary_fingerprint[16]; // = {0xD6,0xFD,0x82,0x6D,0x94,0x92,0x21,0x39,0x6F,0x4F,0xFC,0x3E,0xCC,0xD3,0xD1,0x92};

  DialRecordStatus() : rid(), status((DialStatus::type)0) {
  }

  virtual ~DialRecordStatus() throw() {}

  ObjectId rid;
  DialStatus::type status;

  _DialRecordStatus__isset __isset;

  void __set_rid(const ObjectId& val) {
    rid = val;
  }

  void __set_status(const DialStatus::type val) {
    status = val;
  }

  bool operator == (const DialRecordStatus & rhs) const
  {
    if (!(rid == rhs.rid))
      return false;
    if (!(status == rhs.status))
      return false;
    return true;
  }
  bool operator != (const DialRecordStatus &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DialRecordStatus & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(DialRecordStatus &a, DialRecordStatus &b);

typedef struct _DialNginxStatus__isset {
  _DialNginxStatus__isset() : server(false), status(false) {}
  bool server;
  bool status;
} _DialNginxStatus__isset;

class DialNginxStatus {
 public:

  static const char* ascii_fingerprint; // = "2F953DB93A5B385116ABFADC51E7F009";
  static const uint8_t binary_fingerprint[16]; // = {0x2F,0x95,0x3D,0xB9,0x3A,0x5B,0x38,0x51,0x16,0xAB,0xFA,0xDC,0x51,0xE7,0xF0,0x09};

  DialNginxStatus() : status((DialStatus::type)0) {
  }

  virtual ~DialNginxStatus() throw() {}

  DialNginxServer server;
  DialStatus::type status;

  _DialNginxStatus__isset __isset;

  void __set_server(const DialNginxServer& val) {
    server = val;
  }

  void __set_status(const DialStatus::type val) {
    status = val;
  }

  bool operator == (const DialNginxStatus & rhs) const
  {
    if (!(server == rhs.server))
      return false;
    if (!(status == rhs.status))
      return false;
    return true;
  }
  bool operator != (const DialNginxStatus &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DialNginxStatus & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(DialNginxStatus &a, DialNginxStatus &b);

typedef struct _DialRecordAlarm__isset {
  _DialRecordAlarm__isset() : ip(false), enable(false), dial(false) {}
  bool ip;
  bool enable;
  bool dial;
} _DialRecordAlarm__isset;

class DialRecordAlarm {
 public:

  static const char* ascii_fingerprint; // = "0746E9A657B4F93392A42831C03048DA";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0x46,0xE9,0xA6,0x57,0xB4,0xF9,0x33,0x92,0xA4,0x28,0x31,0xC0,0x30,0x48,0xDA};

  DialRecordAlarm() : enable(0), dial(0) {
  }

  virtual ~DialRecordAlarm() throw() {}

  IpAddr ip;
  bool enable;
  bool dial;

  _DialRecordAlarm__isset __isset;

  void __set_ip(const IpAddr& val) {
    ip = val;
  }

  void __set_enable(const bool val) {
    enable = val;
  }

  void __set_dial(const bool val) {
    dial = val;
  }

  bool operator == (const DialRecordAlarm & rhs) const
  {
    if (!(ip == rhs.ip))
      return false;
    if (!(enable == rhs.enable))
      return false;
    if (!(dial == rhs.dial))
      return false;
    return true;
  }
  bool operator != (const DialRecordAlarm &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DialRecordAlarm & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(DialRecordAlarm &a, DialRecordAlarm &b);

typedef struct _DialServerStatus__isset {
  _DialServerStatus__isset() : ip(false), status(false) {}
  bool ip;
  bool status;
} _DialServerStatus__isset;

class DialServerStatus {
 public:

  static const char* ascii_fingerprint; // = "FFD913AA57DE1D8059AEF9A11DA430B1";
  static const uint8_t binary_fingerprint[16]; // = {0xFF,0xD9,0x13,0xAA,0x57,0xDE,0x1D,0x80,0x59,0xAE,0xF9,0xA1,0x1D,0xA4,0x30,0xB1};

  DialServerStatus() : status((DialStatus::type)0) {
  }

  virtual ~DialServerStatus() throw() {}

  IpAddr ip;
  DialStatus::type status;

  _DialServerStatus__isset __isset;

  void __set_ip(const IpAddr& val) {
    ip = val;
  }

  void __set_status(const DialStatus::type val) {
    status = val;
  }

  bool operator == (const DialServerStatus & rhs) const
  {
    if (!(ip == rhs.ip))
      return false;
    if (!(status == rhs.status))
      return false;
    return true;
  }
  bool operator != (const DialServerStatus &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DialServerStatus & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(DialServerStatus &a, DialServerStatus &b);

typedef struct _IpsecAddress__isset {
  _IpsecAddress__isset() : ip(false), mask(false) {}
  bool ip;
  bool mask;
} _IpsecAddress__isset;

class IpsecAddress {
 public:

  static const char* ascii_fingerprint; // = "9A8F93F25ADECFCB7475FE2B2CCBA45A";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x8F,0x93,0xF2,0x5A,0xDE,0xCF,0xCB,0x74,0x75,0xFE,0x2B,0x2C,0xCB,0xA4,0x5A};

  IpsecAddress() : mask(0) {
  }

  virtual ~IpsecAddress() throw() {}

  IpAddr ip;
  int32_t mask;

  _IpsecAddress__isset __isset;

  void __set_ip(const IpAddr& val) {
    ip = val;
  }

  void __set_mask(const int32_t val) {
    mask = val;
  }

  bool operator == (const IpsecAddress & rhs) const
  {
    if (!(ip == rhs.ip))
      return false;
    if (!(mask == rhs.mask))
      return false;
    return true;
  }
  bool operator != (const IpsecAddress &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IpsecAddress & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(IpsecAddress &a, IpsecAddress &b);

typedef struct _DomainInfo__isset {
  _DomainInfo__isset() : typ(false), name(false) {}
  bool typ;
  bool name;
} _DomainInfo__isset;

class DomainInfo {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  DomainInfo() : typ(), name() {
  }

  virtual ~DomainInfo() throw() {}

  std::string typ;
  std::string name;

  _DomainInfo__isset __isset;

  void __set_typ(const std::string& val) {
    typ = val;
  }

  void __set_name(const std::string& val) {
    name = val;
  }

  bool operator == (const DomainInfo & rhs) const
  {
    if (!(typ == rhs.typ))
      return false;
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const DomainInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DomainInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(DomainInfo &a, DomainInfo &b);

typedef struct _RangeInfo__isset {
  _RangeInfo__isset() : start(false), ends(false) {}
  bool start;
  bool ends;
} _RangeInfo__isset;

class RangeInfo {
 public:

  static const char* ascii_fingerprint; // = "C88FB7958D86460D03E699333A272947";
  static const uint8_t binary_fingerprint[16]; // = {0xC8,0x8F,0xB7,0x95,0x8D,0x86,0x46,0x0D,0x03,0xE6,0x99,0x33,0x3A,0x27,0x29,0x47};

  RangeInfo() : start(0), ends(0) {
  }

  virtual ~RangeInfo() throw() {}

  int16_t start;
  int16_t ends;

  _RangeInfo__isset __isset;

  void __set_start(const int16_t val) {
    start = val;
  }

  void __set_ends(const int16_t val) {
    ends = val;
  }

  bool operator == (const RangeInfo & rhs) const
  {
    if (!(start == rhs.start))
      return false;
    if (!(ends == rhs.ends))
      return false;
    return true;
  }
  bool operator != (const RangeInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RangeInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RangeInfo &a, RangeInfo &b);

typedef struct _SysIpSec__isset {
  _SysIpSec__isset() : name(false), ipsec(false) {}
  bool name;
  bool ipsec;
} _SysIpSec__isset;

class SysIpSec {
 public:

  static const char* ascii_fingerprint; // = "3A19231F195BACAABE71B5EADE6FF1DC";
  static const uint8_t binary_fingerprint[16]; // = {0x3A,0x19,0x23,0x1F,0x19,0x5B,0xAC,0xAA,0xBE,0x71,0xB5,0xEA,0xDE,0x6F,0xF1,0xDC};

  SysIpSec() : name() {
  }

  virtual ~SysIpSec() throw() {}

  std::string name;
  IpsecAddress ipsec;

  _SysIpSec__isset __isset;

  void __set_name(const std::string& val) {
    name = val;
  }

  void __set_ipsec(const IpsecAddress& val) {
    ipsec = val;
  }

  bool operator == (const SysIpSec & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(ipsec == rhs.ipsec))
      return false;
    return true;
  }
  bool operator != (const SysIpSec &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SysIpSec & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(SysIpSec &a, SysIpSec &b);

typedef struct _AclInfo__isset {
  _AclInfo__isset() : id(false), priority(false), srcIpSec(false), dstIpSec(false), srcPortSec(false), dstPortSec(false), frameTypeSec(false), ipProtoSec(false), qpsLimit(false) {}
  bool id;
  bool priority;
  bool srcIpSec;
  bool dstIpSec;
  bool srcPortSec;
  bool dstPortSec;
  bool frameTypeSec;
  bool ipProtoSec;
  bool qpsLimit;
} _AclInfo__isset;

class AclInfo {
 public:

  static const char* ascii_fingerprint; // = "F07ADD7E9B667BFAA72D29B39BD71E7F";
  static const uint8_t binary_fingerprint[16]; // = {0xF0,0x7A,0xDD,0x7E,0x9B,0x66,0x7B,0xFA,0xA7,0x2D,0x29,0xB3,0x9B,0xD7,0x1E,0x7F};

  AclInfo() : id(), priority(0), qpsLimit(0) {
  }

  virtual ~AclInfo() throw() {}

  ObjectId id;
  int32_t priority;
  IpsecAddress srcIpSec;
  IpsecAddress dstIpSec;
  RangeInfo srcPortSec;
  RangeInfo dstPortSec;
  RangeInfo frameTypeSec;
  RangeInfo ipProtoSec;
  int32_t qpsLimit;

  _AclInfo__isset __isset;

  void __set_id(const ObjectId& val) {
    id = val;
  }

  void __set_priority(const int32_t val) {
    priority = val;
    __isset.priority = true;
  }

  void __set_srcIpSec(const IpsecAddress& val) {
    srcIpSec = val;
    __isset.srcIpSec = true;
  }

  void __set_dstIpSec(const IpsecAddress& val) {
    dstIpSec = val;
    __isset.dstIpSec = true;
  }

  void __set_srcPortSec(const RangeInfo& val) {
    srcPortSec = val;
    __isset.srcPortSec = true;
  }

  void __set_dstPortSec(const RangeInfo& val) {
    dstPortSec = val;
    __isset.dstPortSec = true;
  }

  void __set_frameTypeSec(const RangeInfo& val) {
    frameTypeSec = val;
    __isset.frameTypeSec = true;
  }

  void __set_ipProtoSec(const RangeInfo& val) {
    ipProtoSec = val;
    __isset.ipProtoSec = true;
  }

  void __set_qpsLimit(const int32_t val) {
    qpsLimit = val;
    __isset.qpsLimit = true;
  }

  bool operator == (const AclInfo & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (__isset.priority != rhs.__isset.priority)
      return false;
    else if (__isset.priority && !(priority == rhs.priority))
      return false;
    if (__isset.srcIpSec != rhs.__isset.srcIpSec)
      return false;
    else if (__isset.srcIpSec && !(srcIpSec == rhs.srcIpSec))
      return false;
    if (__isset.dstIpSec != rhs.__isset.dstIpSec)
      return false;
    else if (__isset.dstIpSec && !(dstIpSec == rhs.dstIpSec))
      return false;
    if (__isset.srcPortSec != rhs.__isset.srcPortSec)
      return false;
    else if (__isset.srcPortSec && !(srcPortSec == rhs.srcPortSec))
      return false;
    if (__isset.dstPortSec != rhs.__isset.dstPortSec)
      return false;
    else if (__isset.dstPortSec && !(dstPortSec == rhs.dstPortSec))
      return false;
    if (__isset.frameTypeSec != rhs.__isset.frameTypeSec)
      return false;
    else if (__isset.frameTypeSec && !(frameTypeSec == rhs.frameTypeSec))
      return false;
    if (__isset.ipProtoSec != rhs.__isset.ipProtoSec)
      return false;
    else if (__isset.ipProtoSec && !(ipProtoSec == rhs.ipProtoSec))
      return false;
    if (__isset.qpsLimit != rhs.__isset.qpsLimit)
      return false;
    else if (__isset.qpsLimit && !(qpsLimit == rhs.qpsLimit))
      return false;
    return true;
  }
  bool operator != (const AclInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AclInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(AclInfo &a, AclInfo &b);

typedef struct _ZoneInfo__isset {
  _ZoneInfo__isset() : name(false), viewName(false), typ(false), nsRecord(false), aRecord(false), soaName(false), soaHost(false), serial(false), refresh(false), retries(false), expire(false), minTtl(false) {}
  bool name;
  bool viewName;
  bool typ;
  bool nsRecord;
  bool aRecord;
  bool soaName;
  bool soaHost;
  bool serial;
  bool refresh;
  bool retries;
  bool expire;
  bool minTtl;
} _ZoneInfo__isset;

class ZoneInfo {
 public:

  static const char* ascii_fingerprint; // = "BFF00B342A14BA3ADD9B5EF49A6DC648";
  static const uint8_t binary_fingerprint[16]; // = {0xBF,0xF0,0x0B,0x34,0x2A,0x14,0xBA,0x3A,0xDD,0x9B,0x5E,0xF4,0x9A,0x6D,0xC6,0x48};

  ZoneInfo() : name(), viewName(), typ(0), nsRecord(), aRecord(), soaName(), soaHost(), serial(0), refresh(0), retries(0), expire(0), minTtl(0) {
  }

  virtual ~ZoneInfo() throw() {}

  std::string name;
  std::string viewName;
  int32_t typ;
  std::string nsRecord;
  std::string aRecord;
  std::string soaName;
  std::string soaHost;
  int32_t serial;
  int32_t refresh;
  int32_t retries;
  int32_t expire;
  int32_t minTtl;

  _ZoneInfo__isset __isset;

  void __set_name(const std::string& val) {
    name = val;
  }

  void __set_viewName(const std::string& val) {
    viewName = val;
  }

  void __set_typ(const int32_t val) {
    typ = val;
    __isset.typ = true;
  }

  void __set_nsRecord(const std::string& val) {
    nsRecord = val;
    __isset.nsRecord = true;
  }

  void __set_aRecord(const std::string& val) {
    aRecord = val;
    __isset.aRecord = true;
  }

  void __set_soaName(const std::string& val) {
    soaName = val;
    __isset.soaName = true;
  }

  void __set_soaHost(const std::string& val) {
    soaHost = val;
    __isset.soaHost = true;
  }

  void __set_serial(const int32_t val) {
    serial = val;
    __isset.serial = true;
  }

  void __set_refresh(const int32_t val) {
    refresh = val;
    __isset.refresh = true;
  }

  void __set_retries(const int32_t val) {
    retries = val;
    __isset.retries = true;
  }

  void __set_expire(const int32_t val) {
    expire = val;
    __isset.expire = true;
  }

  void __set_minTtl(const int32_t val) {
    minTtl = val;
    __isset.minTtl = true;
  }

  bool operator == (const ZoneInfo & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(viewName == rhs.viewName))
      return false;
    if (__isset.typ != rhs.__isset.typ)
      return false;
    else if (__isset.typ && !(typ == rhs.typ))
      return false;
    if (__isset.nsRecord != rhs.__isset.nsRecord)
      return false;
    else if (__isset.nsRecord && !(nsRecord == rhs.nsRecord))
      return false;
    if (__isset.aRecord != rhs.__isset.aRecord)
      return false;
    else if (__isset.aRecord && !(aRecord == rhs.aRecord))
      return false;
    if (__isset.soaName != rhs.__isset.soaName)
      return false;
    else if (__isset.soaName && !(soaName == rhs.soaName))
      return false;
    if (__isset.soaHost != rhs.__isset.soaHost)
      return false;
    else if (__isset.soaHost && !(soaHost == rhs.soaHost))
      return false;
    if (__isset.serial != rhs.__isset.serial)
      return false;
    else if (__isset.serial && !(serial == rhs.serial))
      return false;
    if (__isset.refresh != rhs.__isset.refresh)
      return false;
    else if (__isset.refresh && !(refresh == rhs.refresh))
      return false;
    if (__isset.retries != rhs.__isset.retries)
      return false;
    else if (__isset.retries && !(retries == rhs.retries))
      return false;
    if (__isset.expire != rhs.__isset.expire)
      return false;
    else if (__isset.expire && !(expire == rhs.expire))
      return false;
    if (__isset.minTtl != rhs.__isset.minTtl)
      return false;
    else if (__isset.minTtl && !(minTtl == rhs.minTtl))
      return false;
    return true;
  }
  bool operator != (const ZoneInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ZoneInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ZoneInfo &a, ZoneInfo &b);

typedef struct _DnsQueryResultSRV__isset {
  _DnsQueryResultSRV__isset() : priority(false), weight(false), port(false), target(false) {}
  bool priority;
  bool weight;
  bool port;
  bool target;
} _DnsQueryResultSRV__isset;

class DnsQueryResultSRV {
 public:

  static const char* ascii_fingerprint; // = "5693FA1A53F649BF7C48D3F739E3EC51";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0x93,0xFA,0x1A,0x53,0xF6,0x49,0xBF,0x7C,0x48,0xD3,0xF7,0x39,0xE3,0xEC,0x51};

  DnsQueryResultSRV() : priority(0), weight(0), port(0), target() {
  }

  virtual ~DnsQueryResultSRV() throw() {}

  int16_t priority;
  int16_t weight;
  int16_t port;
  std::string target;

  _DnsQueryResultSRV__isset __isset;

  void __set_priority(const int16_t val) {
    priority = val;
  }

  void __set_weight(const int16_t val) {
    weight = val;
  }

  void __set_port(const int16_t val) {
    port = val;
  }

  void __set_target(const std::string& val) {
    target = val;
  }

  bool operator == (const DnsQueryResultSRV & rhs) const
  {
    if (!(priority == rhs.priority))
      return false;
    if (!(weight == rhs.weight))
      return false;
    if (!(port == rhs.port))
      return false;
    if (!(target == rhs.target))
      return false;
    return true;
  }
  bool operator != (const DnsQueryResultSRV &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DnsQueryResultSRV & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(DnsQueryResultSRV &a, DnsQueryResultSRV &b);

typedef struct _DnsQueryResultNAPTR__isset {
  _DnsQueryResultNAPTR__isset() : order(false), pref(false), flags(false), svc(false), regexp(false), domainName(false) {}
  bool order;
  bool pref;
  bool flags;
  bool svc;
  bool regexp;
  bool domainName;
} _DnsQueryResultNAPTR__isset;

class DnsQueryResultNAPTR {
 public:

  static const char* ascii_fingerprint; // = "21E6A34A2EFE8E8193B7ED409BF308BF";
  static const uint8_t binary_fingerprint[16]; // = {0x21,0xE6,0xA3,0x4A,0x2E,0xFE,0x8E,0x81,0x93,0xB7,0xED,0x40,0x9B,0xF3,0x08,0xBF};

  DnsQueryResultNAPTR() : order(0), pref(0), flags(), svc(), regexp(), domainName() {
  }

  virtual ~DnsQueryResultNAPTR() throw() {}

  int16_t order;
  int16_t pref;
  std::string flags;
  std::string svc;
  std::string regexp;
  std::string domainName;

  _DnsQueryResultNAPTR__isset __isset;

  void __set_order(const int16_t val) {
    order = val;
  }

  void __set_pref(const int16_t val) {
    pref = val;
  }

  void __set_flags(const std::string& val) {
    flags = val;
  }

  void __set_svc(const std::string& val) {
    svc = val;
  }

  void __set_regexp(const std::string& val) {
    regexp = val;
  }

  void __set_domainName(const std::string& val) {
    domainName = val;
  }

  bool operator == (const DnsQueryResultNAPTR & rhs) const
  {
    if (!(order == rhs.order))
      return false;
    if (!(pref == rhs.pref))
      return false;
    if (!(flags == rhs.flags))
      return false;
    if (!(svc == rhs.svc))
      return false;
    if (!(regexp == rhs.regexp))
      return false;
    if (!(domainName == rhs.domainName))
      return false;
    return true;
  }
  bool operator != (const DnsQueryResultNAPTR &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DnsQueryResultNAPTR & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(DnsQueryResultNAPTR &a, DnsQueryResultNAPTR &b);

typedef struct _DnsQueryResultMX__isset {
  _DnsQueryResultMX__isset() : pref(false), domainName(false) {}
  bool pref;
  bool domainName;
} _DnsQueryResultMX__isset;

class DnsQueryResultMX {
 public:

  static const char* ascii_fingerprint; // = "15896F1A4438B1ECBB80CEA66AD0C4C5";
  static const uint8_t binary_fingerprint[16]; // = {0x15,0x89,0x6F,0x1A,0x44,0x38,0xB1,0xEC,0xBB,0x80,0xCE,0xA6,0x6A,0xD0,0xC4,0xC5};

  DnsQueryResultMX() : pref(0), domainName() {
  }

  virtual ~DnsQueryResultMX() throw() {}

  int16_t pref;
  std::string domainName;

  _DnsQueryResultMX__isset __isset;

  void __set_pref(const int16_t val) {
    pref = val;
  }

  void __set_domainName(const std::string& val) {
    domainName = val;
  }

  bool operator == (const DnsQueryResultMX & rhs) const
  {
    if (!(pref == rhs.pref))
      return false;
    if (!(domainName == rhs.domainName))
      return false;
    return true;
  }
  bool operator != (const DnsQueryResultMX &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DnsQueryResultMX & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(DnsQueryResultMX &a, DnsQueryResultMX &b);

typedef struct _DnsQueryResult__isset {
  _DnsQueryResult__isset() : a(false), aaaa(false), ns(false), cname(false), ptr(false), txt(false), srv(false), naptr(false), mx(false) {}
  bool a;
  bool aaaa;
  bool ns;
  bool cname;
  bool ptr;
  bool txt;
  bool srv;
  bool naptr;
  bool mx;
} _DnsQueryResult__isset;

class DnsQueryResult {
 public:

  static const char* ascii_fingerprint; // = "575675813C2D67D7977730AAFC8780FB";
  static const uint8_t binary_fingerprint[16]; // = {0x57,0x56,0x75,0x81,0x3C,0x2D,0x67,0xD7,0x97,0x77,0x30,0xAA,0xFC,0x87,0x80,0xFB};

  DnsQueryResult() : a(), aaaa(), ns(), cname(), ptr(), txt() {
  }

  virtual ~DnsQueryResult() throw() {}

  std::string a;
  std::string aaaa;
  std::string ns;
  std::string cname;
  std::string ptr;
  std::string txt;
  DnsQueryResultSRV srv;
  DnsQueryResultNAPTR naptr;
  DnsQueryResultMX mx;

  _DnsQueryResult__isset __isset;

  void __set_a(const std::string& val) {
    a = val;
  }

  void __set_aaaa(const std::string& val) {
    aaaa = val;
  }

  void __set_ns(const std::string& val) {
    ns = val;
  }

  void __set_cname(const std::string& val) {
    cname = val;
  }

  void __set_ptr(const std::string& val) {
    ptr = val;
  }

  void __set_txt(const std::string& val) {
    txt = val;
  }

  void __set_srv(const DnsQueryResultSRV& val) {
    srv = val;
  }

  void __set_naptr(const DnsQueryResultNAPTR& val) {
    naptr = val;
  }

  void __set_mx(const DnsQueryResultMX& val) {
    mx = val;
  }

  bool operator == (const DnsQueryResult & rhs) const
  {
    if (!(a == rhs.a))
      return false;
    if (!(aaaa == rhs.aaaa))
      return false;
    if (!(ns == rhs.ns))
      return false;
    if (!(cname == rhs.cname))
      return false;
    if (!(ptr == rhs.ptr))
      return false;
    if (!(txt == rhs.txt))
      return false;
    if (!(srv == rhs.srv))
      return false;
    if (!(naptr == rhs.naptr))
      return false;
    if (!(mx == rhs.mx))
      return false;
    return true;
  }
  bool operator != (const DnsQueryResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DnsQueryResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(DnsQueryResult &a, DnsQueryResult &b);

typedef struct _RecordInfo__isset {
  _RecordInfo__isset() : name(false), viewName(false), zoneName(false), typ(false), result(false), ttl(false), weight(false), status(false), recordId(false) {}
  bool name;
  bool viewName;
  bool zoneName;
  bool typ;
  bool result;
  bool ttl;
  bool weight;
  bool status;
  bool recordId;
} _RecordInfo__isset;

class RecordInfo {
 public:

  static const char* ascii_fingerprint; // = "5EFD6D61C906EBE223C35CF06CBEE2C6";
  static const uint8_t binary_fingerprint[16]; // = {0x5E,0xFD,0x6D,0x61,0xC9,0x06,0xEB,0xE2,0x23,0xC3,0x5C,0xF0,0x6C,0xBE,0xE2,0xC6};

  RecordInfo() : name(), viewName(), zoneName(), typ(0), ttl(0), weight(0), status((Status::type)0), recordId() {
  }

  virtual ~RecordInfo() throw() {}

  std::string name;
  std::string viewName;
  std::string zoneName;
  int32_t typ;
  DnsQueryResult result;
  int32_t ttl;
  int32_t weight;
  Status::type status;
  std::string recordId;

  _RecordInfo__isset __isset;

  void __set_name(const std::string& val) {
    name = val;
  }

  void __set_viewName(const std::string& val) {
    viewName = val;
  }

  void __set_zoneName(const std::string& val) {
    zoneName = val;
  }

  void __set_typ(const int32_t val) {
    typ = val;
  }

  void __set_result(const DnsQueryResult& val) {
    result = val;
  }

  void __set_ttl(const int32_t val) {
    ttl = val;
    __isset.ttl = true;
  }

  void __set_weight(const int32_t val) {
    weight = val;
    __isset.weight = true;
  }

  void __set_status(const Status::type val) {
    status = val;
    __isset.status = true;
  }

  void __set_recordId(const std::string& val) {
    recordId = val;
  }

  bool operator == (const RecordInfo & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(viewName == rhs.viewName))
      return false;
    if (!(zoneName == rhs.zoneName))
      return false;
    if (!(typ == rhs.typ))
      return false;
    if (!(result == rhs.result))
      return false;
    if (__isset.ttl != rhs.__isset.ttl)
      return false;
    else if (__isset.ttl && !(ttl == rhs.ttl))
      return false;
    if (__isset.weight != rhs.__isset.weight)
      return false;
    else if (__isset.weight && !(weight == rhs.weight))
      return false;
    if (__isset.status != rhs.__isset.status)
      return false;
    else if (__isset.status && !(status == rhs.status))
      return false;
    if (!(recordId == rhs.recordId))
      return false;
    return true;
  }
  bool operator != (const RecordInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RecordInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RecordInfo &a, RecordInfo &b);

typedef struct _ProxyServer__isset {
  _ProxyServer__isset() : ip(false), weight(false), status(false) {}
  bool ip;
  bool weight;
  bool status;
} _ProxyServer__isset;

class ProxyServer {
 public:

  static const char* ascii_fingerprint; // = "13EAA24218838F6B07279A3F28B6D9A0";
  static const uint8_t binary_fingerprint[16]; // = {0x13,0xEA,0xA2,0x42,0x18,0x83,0x8F,0x6B,0x07,0x27,0x9A,0x3F,0x28,0xB6,0xD9,0xA0};

  ProxyServer() : weight(0), status((Status::type)0) {
  }

  virtual ~ProxyServer() throw() {}

  IpAddr ip;
  int32_t weight;
  Status::type status;

  _ProxyServer__isset __isset;

  void __set_ip(const IpAddr& val) {
    ip = val;
  }

  void __set_weight(const int32_t val) {
    weight = val;
  }

  void __set_status(const Status::type val) {
    status = val;
  }

  bool operator == (const ProxyServer & rhs) const
  {
    if (!(ip == rhs.ip))
      return false;
    if (!(weight == rhs.weight))
      return false;
    if (!(status == rhs.status))
      return false;
    return true;
  }
  bool operator != (const ProxyServer &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProxyServer & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ProxyServer &a, ProxyServer &b);

typedef struct _ProxyPolicyInfo__isset {
  _ProxyPolicyInfo__isset() : viewName(false), domain(false), serverGroupName(false) {}
  bool viewName;
  bool domain;
  bool serverGroupName;
} _ProxyPolicyInfo__isset;

class ProxyPolicyInfo {
 public:

  static const char* ascii_fingerprint; // = "258B6C45AADFE10E295522F7E9355361";
  static const uint8_t binary_fingerprint[16]; // = {0x25,0x8B,0x6C,0x45,0xAA,0xDF,0xE1,0x0E,0x29,0x55,0x22,0xF7,0xE9,0x35,0x53,0x61};

  ProxyPolicyInfo() : viewName(), serverGroupName() {
  }

  virtual ~ProxyPolicyInfo() throw() {}

  std::string viewName;
  DomainInfo domain;
  std::string serverGroupName;

  _ProxyPolicyInfo__isset __isset;

  void __set_viewName(const std::string& val) {
    viewName = val;
  }

  void __set_domain(const DomainInfo& val) {
    domain = val;
  }

  void __set_serverGroupName(const std::string& val) {
    serverGroupName = val;
    __isset.serverGroupName = true;
  }

  bool operator == (const ProxyPolicyInfo & rhs) const
  {
    if (!(viewName == rhs.viewName))
      return false;
    if (!(domain == rhs.domain))
      return false;
    if (__isset.serverGroupName != rhs.__isset.serverGroupName)
      return false;
    else if (__isset.serverGroupName && !(serverGroupName == rhs.serverGroupName))
      return false;
    return true;
  }
  bool operator != (const ProxyPolicyInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProxyPolicyInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ProxyPolicyInfo &a, ProxyPolicyInfo &b);

typedef struct _TtlPolicyInfo__isset {
  _TtlPolicyInfo__isset() : domain(false), minTtl(false), maxTtl(false) {}
  bool domain;
  bool minTtl;
  bool maxTtl;
} _TtlPolicyInfo__isset;

class TtlPolicyInfo {
 public:

  static const char* ascii_fingerprint; // = "ABFCF56323AB99CBDF1465375AD40CA7";
  static const uint8_t binary_fingerprint[16]; // = {0xAB,0xFC,0xF5,0x63,0x23,0xAB,0x99,0xCB,0xDF,0x14,0x65,0x37,0x5A,0xD4,0x0C,0xA7};

  TtlPolicyInfo() : minTtl(0), maxTtl(0) {
  }

  virtual ~TtlPolicyInfo() throw() {}

  DomainInfo domain;
  int32_t minTtl;
  int32_t maxTtl;

  _TtlPolicyInfo__isset __isset;

  void __set_domain(const DomainInfo& val) {
    domain = val;
  }

  void __set_minTtl(const int32_t val) {
    minTtl = val;
    __isset.minTtl = true;
  }

  void __set_maxTtl(const int32_t val) {
    maxTtl = val;
    __isset.maxTtl = true;
  }

  bool operator == (const TtlPolicyInfo & rhs) const
  {
    if (!(domain == rhs.domain))
      return false;
    if (__isset.minTtl != rhs.__isset.minTtl)
      return false;
    else if (__isset.minTtl && !(minTtl == rhs.minTtl))
      return false;
    if (__isset.maxTtl != rhs.__isset.maxTtl)
      return false;
    else if (__isset.maxTtl && !(maxTtl == rhs.maxTtl))
      return false;
    return true;
  }
  bool operator != (const TtlPolicyInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TtlPolicyInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TtlPolicyInfo &a, TtlPolicyInfo &b);

typedef struct _ForwardPolicyInfo__isset {
  _ForwardPolicyInfo__isset() : ip(false), port(false), weight(false), status(false) {}
  bool ip;
  bool port;
  bool weight;
  bool status;
} _ForwardPolicyInfo__isset;

class ForwardPolicyInfo {
 public:

  static const char* ascii_fingerprint; // = "761C97469E30FB63D8B979871C7428FA";
  static const uint8_t binary_fingerprint[16]; // = {0x76,0x1C,0x97,0x46,0x9E,0x30,0xFB,0x63,0xD8,0xB9,0x79,0x87,0x1C,0x74,0x28,0xFA};

  ForwardPolicyInfo() : port(0), weight(0), status((Status::type)0) {
  }

  virtual ~ForwardPolicyInfo() throw() {}

  IpAddr ip;
  int16_t port;
  int32_t weight;
  Status::type status;

  _ForwardPolicyInfo__isset __isset;

  void __set_ip(const IpAddr& val) {
    ip = val;
  }

  void __set_port(const int16_t val) {
    port = val;
  }

  void __set_weight(const int32_t val) {
    weight = val;
    __isset.weight = true;
  }

  void __set_status(const Status::type val) {
    status = val;
    __isset.status = true;
  }

  bool operator == (const ForwardPolicyInfo & rhs) const
  {
    if (!(ip == rhs.ip))
      return false;
    if (!(port == rhs.port))
      return false;
    if (__isset.weight != rhs.__isset.weight)
      return false;
    else if (__isset.weight && !(weight == rhs.weight))
      return false;
    if (__isset.status != rhs.__isset.status)
      return false;
    else if (__isset.status && !(status == rhs.status))
      return false;
    return true;
  }
  bool operator != (const ForwardPolicyInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ForwardPolicyInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ForwardPolicyInfo &a, ForwardPolicyInfo &b);

typedef struct _DialRecord__isset {
  _DialRecord__isset() : rid(false), ip(false), ttl(false), priority(false), enabled(false) {}
  bool rid;
  bool ip;
  bool ttl;
  bool priority;
  bool enabled;
} _DialRecord__isset;

class DialRecord {
 public:

  static const char* ascii_fingerprint; // = "2040ECA943D9E6617B68D06B19F667D5";
  static const uint8_t binary_fingerprint[16]; // = {0x20,0x40,0xEC,0xA9,0x43,0xD9,0xE6,0x61,0x7B,0x68,0xD0,0x6B,0x19,0xF6,0x67,0xD5};

  DialRecord() : rid(), ttl(0), priority(0), enabled(0) {
  }

  virtual ~DialRecord() throw() {}

  ObjectId rid;
  IpAddr ip;
  int32_t ttl;
  int32_t priority;
  bool enabled;

  _DialRecord__isset __isset;

  void __set_rid(const ObjectId& val) {
    rid = val;
  }

  void __set_ip(const IpAddr& val) {
    ip = val;
  }

  void __set_ttl(const int32_t val) {
    ttl = val;
  }

  void __set_priority(const int32_t val) {
    priority = val;
  }

  void __set_enabled(const bool val) {
    enabled = val;
  }

  bool operator == (const DialRecord & rhs) const
  {
    if (!(rid == rhs.rid))
      return false;
    if (!(ip == rhs.ip))
      return false;
    if (!(ttl == rhs.ttl))
      return false;
    if (!(priority == rhs.priority))
      return false;
    if (!(enabled == rhs.enabled))
      return false;
    return true;
  }
  bool operator != (const DialRecord &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DialRecord & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(DialRecord &a, DialRecord &b);

typedef struct _HealthGroupInfo__isset {
  _HealthGroupInfo__isset() : zoneName(false), viewName(false), name(false) {}
  bool zoneName;
  bool viewName;
  bool name;
} _HealthGroupInfo__isset;

class HealthGroupInfo {
 public:

  static const char* ascii_fingerprint; // = "AB879940BD15B6B25691265F7384B271";
  static const uint8_t binary_fingerprint[16]; // = {0xAB,0x87,0x99,0x40,0xBD,0x15,0xB6,0xB2,0x56,0x91,0x26,0x5F,0x73,0x84,0xB2,0x71};

  HealthGroupInfo() : zoneName(), viewName(), name() {
  }

  virtual ~HealthGroupInfo() throw() {}

  std::string zoneName;
  std::string viewName;
  std::string name;

  _HealthGroupInfo__isset __isset;

  void __set_zoneName(const std::string& val) {
    zoneName = val;
  }

  void __set_viewName(const std::string& val) {
    viewName = val;
  }

  void __set_name(const std::string& val) {
    name = val;
  }

  bool operator == (const HealthGroupInfo & rhs) const
  {
    if (!(zoneName == rhs.zoneName))
      return false;
    if (!(viewName == rhs.viewName))
      return false;
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const HealthGroupInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HealthGroupInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(HealthGroupInfo &a, HealthGroupInfo &b);

typedef struct _DialOption__isset {
  _DialOption__isset() : destUrl(false), testMethod(false), expectCode(false), expectMatch(false) {}
  bool destUrl;
  bool testMethod;
  bool expectCode;
  bool expectMatch;
} _DialOption__isset;

class DialOption {
 public:

  static const char* ascii_fingerprint; // = "B5F393233CDCDBA52FC44870DC4EB043";
  static const uint8_t binary_fingerprint[16]; // = {0xB5,0xF3,0x93,0x23,0x3C,0xDC,0xDB,0xA5,0x2F,0xC4,0x48,0x70,0xDC,0x4E,0xB0,0x43};

  DialOption() : destUrl(), testMethod(), expectMatch() {
  }

  virtual ~DialOption() throw() {}

  std::string destUrl;
  std::string testMethod;
  std::vector<int32_t>  expectCode;
  std::string expectMatch;

  _DialOption__isset __isset;

  void __set_destUrl(const std::string& val) {
    destUrl = val;
  }

  void __set_testMethod(const std::string& val) {
    testMethod = val;
  }

  void __set_expectCode(const std::vector<int32_t> & val) {
    expectCode = val;
  }

  void __set_expectMatch(const std::string& val) {
    expectMatch = val;
  }

  bool operator == (const DialOption & rhs) const
  {
    if (!(destUrl == rhs.destUrl))
      return false;
    if (!(testMethod == rhs.testMethod))
      return false;
    if (!(expectCode == rhs.expectCode))
      return false;
    if (!(expectMatch == rhs.expectMatch))
      return false;
    return true;
  }
  bool operator != (const DialOption &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DialOption & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(DialOption &a, DialOption &b);

typedef struct _HealthPolicyInfo__isset {
  _HealthPolicyInfo__isset() : name(false), method(false), port(false), freq(false), times(false), passed(false), option(false) {}
  bool name;
  bool method;
  bool port;
  bool freq;
  bool times;
  bool passed;
  bool option;
} _HealthPolicyInfo__isset;

class HealthPolicyInfo {
 public:

  static const char* ascii_fingerprint; // = "5553E1F72F0CC7CD5E18B3DD7568AAFF";
  static const uint8_t binary_fingerprint[16]; // = {0x55,0x53,0xE1,0xF7,0x2F,0x0C,0xC7,0xCD,0x5E,0x18,0xB3,0xDD,0x75,0x68,0xAA,0xFF};

  HealthPolicyInfo() : name(), method((DialMethod::type)0), port(0), freq(0), times(0), passed(0) {
  }

  virtual ~HealthPolicyInfo() throw() {}

  std::string name;
  DialMethod::type method;
  int16_t port;
  int32_t freq;
  int32_t times;
  int32_t passed;
  DialOption option;

  _HealthPolicyInfo__isset __isset;

  void __set_name(const std::string& val) {
    name = val;
  }

  void __set_method(const DialMethod::type val) {
    method = val;
  }

  void __set_port(const int16_t val) {
    port = val;
    __isset.port = true;
  }

  void __set_freq(const int32_t val) {
    freq = val;
  }

  void __set_times(const int32_t val) {
    times = val;
  }

  void __set_passed(const int32_t val) {
    passed = val;
  }

  void __set_option(const DialOption& val) {
    option = val;
  }

  bool operator == (const HealthPolicyInfo & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(method == rhs.method))
      return false;
    if (__isset.port != rhs.__isset.port)
      return false;
    else if (__isset.port && !(port == rhs.port))
      return false;
    if (!(freq == rhs.freq))
      return false;
    if (!(times == rhs.times))
      return false;
    if (!(passed == rhs.passed))
      return false;
    if (!(option == rhs.option))
      return false;
    return true;
  }
  bool operator != (const HealthPolicyInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HealthPolicyInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(HealthPolicyInfo &a, HealthPolicyInfo &b);

typedef struct _FilterReportInfo__isset {
  _FilterReportInfo__isset() : total(false), exceptIpLimit(false), exceptUdpLimit(false), exceptDnsLimit(false), ipLimit(false), domainLimit(false), aclLimit(false), userWhiteLimit(false), userBlackLimit(false), domainBlackLimit(false) {}
  bool total;
  bool exceptIpLimit;
  bool exceptUdpLimit;
  bool exceptDnsLimit;
  bool ipLimit;
  bool domainLimit;
  bool aclLimit;
  bool userWhiteLimit;
  bool userBlackLimit;
  bool domainBlackLimit;
} _FilterReportInfo__isset;

class FilterReportInfo {
 public:

  static const char* ascii_fingerprint; // = "908BA636099DA6568DBB360822A4B2C4";
  static const uint8_t binary_fingerprint[16]; // = {0x90,0x8B,0xA6,0x36,0x09,0x9D,0xA6,0x56,0x8D,0xBB,0x36,0x08,0x22,0xA4,0xB2,0xC4};

  FilterReportInfo() : total(0), exceptIpLimit(0), exceptUdpLimit(0), exceptDnsLimit(0), ipLimit(0), domainLimit(0), aclLimit(0), userWhiteLimit(0), userBlackLimit(0), domainBlackLimit(0) {
  }

  virtual ~FilterReportInfo() throw() {}

  int32_t total;
  int32_t exceptIpLimit;
  int32_t exceptUdpLimit;
  int32_t exceptDnsLimit;
  int32_t ipLimit;
  int32_t domainLimit;
  int32_t aclLimit;
  int32_t userWhiteLimit;
  int32_t userBlackLimit;
  int32_t domainBlackLimit;

  _FilterReportInfo__isset __isset;

  void __set_total(const int32_t val) {
    total = val;
  }

  void __set_exceptIpLimit(const int32_t val) {
    exceptIpLimit = val;
  }

  void __set_exceptUdpLimit(const int32_t val) {
    exceptUdpLimit = val;
  }

  void __set_exceptDnsLimit(const int32_t val) {
    exceptDnsLimit = val;
  }

  void __set_ipLimit(const int32_t val) {
    ipLimit = val;
  }

  void __set_domainLimit(const int32_t val) {
    domainLimit = val;
  }

  void __set_aclLimit(const int32_t val) {
    aclLimit = val;
  }

  void __set_userWhiteLimit(const int32_t val) {
    userWhiteLimit = val;
  }

  void __set_userBlackLimit(const int32_t val) {
    userBlackLimit = val;
  }

  void __set_domainBlackLimit(const int32_t val) {
    domainBlackLimit = val;
  }

  bool operator == (const FilterReportInfo & rhs) const
  {
    if (!(total == rhs.total))
      return false;
    if (!(exceptIpLimit == rhs.exceptIpLimit))
      return false;
    if (!(exceptUdpLimit == rhs.exceptUdpLimit))
      return false;
    if (!(exceptDnsLimit == rhs.exceptDnsLimit))
      return false;
    if (!(ipLimit == rhs.ipLimit))
      return false;
    if (!(domainLimit == rhs.domainLimit))
      return false;
    if (!(aclLimit == rhs.aclLimit))
      return false;
    if (!(userWhiteLimit == rhs.userWhiteLimit))
      return false;
    if (!(userBlackLimit == rhs.userBlackLimit))
      return false;
    if (!(domainBlackLimit == rhs.domainBlackLimit))
      return false;
    return true;
  }
  bool operator != (const FilterReportInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FilterReportInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(FilterReportInfo &a, FilterReportInfo &b);

typedef struct _RequestReportInfo__isset {
  _RequestReportInfo__isset() : total(false), a(false), aaaa(false), cname(false), ptr(false), txt(false), srv(false), naptr(false), mx(false) {}
  bool total;
  bool a;
  bool aaaa;
  bool cname;
  bool ptr;
  bool txt;
  bool srv;
  bool naptr;
  bool mx;
} _RequestReportInfo__isset;

class RequestReportInfo {
 public:

  static const char* ascii_fingerprint; // = "E559B46C8C264E8A08FC77DF250DF8D1";
  static const uint8_t binary_fingerprint[16]; // = {0xE5,0x59,0xB4,0x6C,0x8C,0x26,0x4E,0x8A,0x08,0xFC,0x77,0xDF,0x25,0x0D,0xF8,0xD1};

  RequestReportInfo() : total(0), a(0), aaaa(0), cname(0), ptr(0), txt(0), srv(0), naptr(0), mx(0) {
  }

  virtual ~RequestReportInfo() throw() {}

  int32_t total;
  int32_t a;
  int32_t aaaa;
  int32_t cname;
  int32_t ptr;
  int32_t txt;
  int32_t srv;
  int32_t naptr;
  int32_t mx;

  _RequestReportInfo__isset __isset;

  void __set_total(const int32_t val) {
    total = val;
  }

  void __set_a(const int32_t val) {
    a = val;
  }

  void __set_aaaa(const int32_t val) {
    aaaa = val;
  }

  void __set_cname(const int32_t val) {
    cname = val;
  }

  void __set_ptr(const int32_t val) {
    ptr = val;
  }

  void __set_txt(const int32_t val) {
    txt = val;
  }

  void __set_srv(const int32_t val) {
    srv = val;
  }

  void __set_naptr(const int32_t val) {
    naptr = val;
  }

  void __set_mx(const int32_t val) {
    mx = val;
  }

  bool operator == (const RequestReportInfo & rhs) const
  {
    if (!(total == rhs.total))
      return false;
    if (!(a == rhs.a))
      return false;
    if (!(aaaa == rhs.aaaa))
      return false;
    if (!(cname == rhs.cname))
      return false;
    if (!(ptr == rhs.ptr))
      return false;
    if (!(txt == rhs.txt))
      return false;
    if (!(srv == rhs.srv))
      return false;
    if (!(naptr == rhs.naptr))
      return false;
    if (!(mx == rhs.mx))
      return false;
    return true;
  }
  bool operator != (const RequestReportInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RequestReportInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RequestReportInfo &a, RequestReportInfo &b);

typedef struct _GeneralReportInfo__isset {
  _GeneralReportInfo__isset() : total(false), noerr(false), servfail(false), nxdomain(false), refuse(false) {}
  bool total;
  bool noerr;
  bool servfail;
  bool nxdomain;
  bool refuse;
} _GeneralReportInfo__isset;

class GeneralReportInfo {
 public:

  static const char* ascii_fingerprint; // = "2EB010665070FC89CB24AB9DA34D5F9D";
  static const uint8_t binary_fingerprint[16]; // = {0x2E,0xB0,0x10,0x66,0x50,0x70,0xFC,0x89,0xCB,0x24,0xAB,0x9D,0xA3,0x4D,0x5F,0x9D};

  GeneralReportInfo() : total(0), noerr(0), servfail(0), nxdomain(0), refuse(0) {
  }

  virtual ~GeneralReportInfo() throw() {}

  int32_t total;
  int32_t noerr;
  int32_t servfail;
  int32_t nxdomain;
  int32_t refuse;

  _GeneralReportInfo__isset __isset;

  void __set_total(const int32_t val) {
    total = val;
  }

  void __set_noerr(const int32_t val) {
    noerr = val;
  }

  void __set_servfail(const int32_t val) {
    servfail = val;
  }

  void __set_nxdomain(const int32_t val) {
    nxdomain = val;
  }

  void __set_refuse(const int32_t val) {
    refuse = val;
  }

  bool operator == (const GeneralReportInfo & rhs) const
  {
    if (!(total == rhs.total))
      return false;
    if (!(noerr == rhs.noerr))
      return false;
    if (!(servfail == rhs.servfail))
      return false;
    if (!(nxdomain == rhs.nxdomain))
      return false;
    if (!(refuse == rhs.refuse))
      return false;
    return true;
  }
  bool operator != (const GeneralReportInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GeneralReportInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(GeneralReportInfo &a, GeneralReportInfo &b);

typedef struct _DNameAccessInfo__isset {
  _DNameAccessInfo__isset() : zoneName(false), viewName(false), domain(false), access(false) {}
  bool zoneName;
  bool viewName;
  bool domain;
  bool access;
} _DNameAccessInfo__isset;

class DNameAccessInfo {
 public:

  static const char* ascii_fingerprint; // = "194A357BC9EE908DC4763D0A5147760A";
  static const uint8_t binary_fingerprint[16]; // = {0x19,0x4A,0x35,0x7B,0xC9,0xEE,0x90,0x8D,0xC4,0x76,0x3D,0x0A,0x51,0x47,0x76,0x0A};

  DNameAccessInfo() : zoneName(), viewName(), domain(), access(0) {
  }

  virtual ~DNameAccessInfo() throw() {}

  std::string zoneName;
  std::string viewName;
  std::string domain;
  int32_t access;

  _DNameAccessInfo__isset __isset;

  void __set_zoneName(const std::string& val) {
    zoneName = val;
  }

  void __set_viewName(const std::string& val) {
    viewName = val;
  }

  void __set_domain(const std::string& val) {
    domain = val;
  }

  void __set_access(const int32_t val) {
    access = val;
  }

  bool operator == (const DNameAccessInfo & rhs) const
  {
    if (!(zoneName == rhs.zoneName))
      return false;
    if (!(viewName == rhs.viewName))
      return false;
    if (!(domain == rhs.domain))
      return false;
    if (!(access == rhs.access))
      return false;
    return true;
  }
  bool operator != (const DNameAccessInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DNameAccessInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(DNameAccessInfo &a, DNameAccessInfo &b);

typedef struct _XProxyReportInfo__isset {
  _XProxyReportInfo__isset() : total(false), proxyRequest(false), proxyAnswer(false), proxyForwardRequest(false), proxyForwardAnswer(false) {}
  bool total;
  bool proxyRequest;
  bool proxyAnswer;
  bool proxyForwardRequest;
  bool proxyForwardAnswer;
} _XProxyReportInfo__isset;

class XProxyReportInfo {
 public:

  static const char* ascii_fingerprint; // = "2EB010665070FC89CB24AB9DA34D5F9D";
  static const uint8_t binary_fingerprint[16]; // = {0x2E,0xB0,0x10,0x66,0x50,0x70,0xFC,0x89,0xCB,0x24,0xAB,0x9D,0xA3,0x4D,0x5F,0x9D};

  XProxyReportInfo() : total(0), proxyRequest(0), proxyAnswer(0), proxyForwardRequest(0), proxyForwardAnswer(0) {
  }

  virtual ~XProxyReportInfo() throw() {}

  int32_t total;
  int32_t proxyRequest;
  int32_t proxyAnswer;
  int32_t proxyForwardRequest;
  int32_t proxyForwardAnswer;

  _XProxyReportInfo__isset __isset;

  void __set_total(const int32_t val) {
    total = val;
  }

  void __set_proxyRequest(const int32_t val) {
    proxyRequest = val;
  }

  void __set_proxyAnswer(const int32_t val) {
    proxyAnswer = val;
  }

  void __set_proxyForwardRequest(const int32_t val) {
    proxyForwardRequest = val;
  }

  void __set_proxyForwardAnswer(const int32_t val) {
    proxyForwardAnswer = val;
  }

  bool operator == (const XProxyReportInfo & rhs) const
  {
    if (!(total == rhs.total))
      return false;
    if (!(proxyRequest == rhs.proxyRequest))
      return false;
    if (!(proxyAnswer == rhs.proxyAnswer))
      return false;
    if (!(proxyForwardRequest == rhs.proxyForwardRequest))
      return false;
    if (!(proxyForwardAnswer == rhs.proxyForwardAnswer))
      return false;
    return true;
  }
  bool operator != (const XProxyReportInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const XProxyReportInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(XProxyReportInfo &a, XProxyReportInfo &b);

typedef struct _XForwardReportInfo__isset {
  _XForwardReportInfo__isset() : total(false), xforwardRequest(false), xforwardAnswer(false) {}
  bool total;
  bool xforwardRequest;
  bool xforwardAnswer;
} _XForwardReportInfo__isset;

class XForwardReportInfo {
 public:

  static const char* ascii_fingerprint; // = "6435B39C87AB0E30F30BEDEFD7328C0D";
  static const uint8_t binary_fingerprint[16]; // = {0x64,0x35,0xB3,0x9C,0x87,0xAB,0x0E,0x30,0xF3,0x0B,0xED,0xEF,0xD7,0x32,0x8C,0x0D};

  XForwardReportInfo() : total(0), xforwardRequest(0), xforwardAnswer(0) {
  }

  virtual ~XForwardReportInfo() throw() {}

  int32_t total;
  int32_t xforwardRequest;
  int32_t xforwardAnswer;

  _XForwardReportInfo__isset __isset;

  void __set_total(const int32_t val) {
    total = val;
  }

  void __set_xforwardRequest(const int32_t val) {
    xforwardRequest = val;
  }

  void __set_xforwardAnswer(const int32_t val) {
    xforwardAnswer = val;
  }

  bool operator == (const XForwardReportInfo & rhs) const
  {
    if (!(total == rhs.total))
      return false;
    if (!(xforwardRequest == rhs.xforwardRequest))
      return false;
    if (!(xforwardAnswer == rhs.xforwardAnswer))
      return false;
    return true;
  }
  bool operator != (const XForwardReportInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const XForwardReportInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(XForwardReportInfo &a, XForwardReportInfo &b);

typedef struct _RecursiveReportInfo__isset {
  _RecursiveReportInfo__isset() : total(false), recursiveRequest(false), recursiveAnswer(false) {}
  bool total;
  bool recursiveRequest;
  bool recursiveAnswer;
} _RecursiveReportInfo__isset;

class RecursiveReportInfo {
 public:

  static const char* ascii_fingerprint; // = "6435B39C87AB0E30F30BEDEFD7328C0D";
  static const uint8_t binary_fingerprint[16]; // = {0x64,0x35,0xB3,0x9C,0x87,0xAB,0x0E,0x30,0xF3,0x0B,0xED,0xEF,0xD7,0x32,0x8C,0x0D};

  RecursiveReportInfo() : total(0), recursiveRequest(0), recursiveAnswer(0) {
  }

  virtual ~RecursiveReportInfo() throw() {}

  int32_t total;
  int32_t recursiveRequest;
  int32_t recursiveAnswer;

  _RecursiveReportInfo__isset __isset;

  void __set_total(const int32_t val) {
    total = val;
  }

  void __set_recursiveRequest(const int32_t val) {
    recursiveRequest = val;
  }

  void __set_recursiveAnswer(const int32_t val) {
    recursiveAnswer = val;
  }

  bool operator == (const RecursiveReportInfo & rhs) const
  {
    if (!(total == rhs.total))
      return false;
    if (!(recursiveRequest == rhs.recursiveRequest))
      return false;
    if (!(recursiveAnswer == rhs.recursiveAnswer))
      return false;
    return true;
  }
  bool operator != (const RecursiveReportInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RecursiveReportInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RecursiveReportInfo &a, RecursiveReportInfo &b);

typedef struct _BackGroundReportInfo__isset {
  _BackGroundReportInfo__isset() : total(false), smartUpdate(false), cacheUpdate(false), limitDrop(false), ttlExpire(false) {}
  bool total;
  bool smartUpdate;
  bool cacheUpdate;
  bool limitDrop;
  bool ttlExpire;
} _BackGroundReportInfo__isset;

class BackGroundReportInfo {
 public:

  static const char* ascii_fingerprint; // = "2EB010665070FC89CB24AB9DA34D5F9D";
  static const uint8_t binary_fingerprint[16]; // = {0x2E,0xB0,0x10,0x66,0x50,0x70,0xFC,0x89,0xCB,0x24,0xAB,0x9D,0xA3,0x4D,0x5F,0x9D};

  BackGroundReportInfo() : total(0), smartUpdate(0), cacheUpdate(0), limitDrop(0), ttlExpire(0) {
  }

  virtual ~BackGroundReportInfo() throw() {}

  int32_t total;
  int32_t smartUpdate;
  int32_t cacheUpdate;
  int32_t limitDrop;
  int32_t ttlExpire;

  _BackGroundReportInfo__isset __isset;

  void __set_total(const int32_t val) {
    total = val;
  }

  void __set_smartUpdate(const int32_t val) {
    smartUpdate = val;
  }

  void __set_cacheUpdate(const int32_t val) {
    cacheUpdate = val;
  }

  void __set_limitDrop(const int32_t val) {
    limitDrop = val;
  }

  void __set_ttlExpire(const int32_t val) {
    ttlExpire = val;
  }

  bool operator == (const BackGroundReportInfo & rhs) const
  {
    if (!(total == rhs.total))
      return false;
    if (!(smartUpdate == rhs.smartUpdate))
      return false;
    if (!(cacheUpdate == rhs.cacheUpdate))
      return false;
    if (!(limitDrop == rhs.limitDrop))
      return false;
    if (!(ttlExpire == rhs.ttlExpire))
      return false;
    return true;
  }
  bool operator != (const BackGroundReportInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackGroundReportInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(BackGroundReportInfo &a, BackGroundReportInfo &b);

typedef struct _TopnIpInfo__isset {
  _TopnIpInfo__isset() : ip(false), access(false) {}
  bool ip;
  bool access;
} _TopnIpInfo__isset;

class TopnIpInfo {
 public:

  static const char* ascii_fingerprint; // = "EEBC915CE44901401D881E6091423036";
  static const uint8_t binary_fingerprint[16]; // = {0xEE,0xBC,0x91,0x5C,0xE4,0x49,0x01,0x40,0x1D,0x88,0x1E,0x60,0x91,0x42,0x30,0x36};

  TopnIpInfo() : ip(), access(0) {
  }

  virtual ~TopnIpInfo() throw() {}

  std::string ip;
  int32_t access;

  _TopnIpInfo__isset __isset;

  void __set_ip(const std::string& val) {
    ip = val;
  }

  void __set_access(const int32_t val) {
    access = val;
  }

  bool operator == (const TopnIpInfo & rhs) const
  {
    if (!(ip == rhs.ip))
      return false;
    if (!(access == rhs.access))
      return false;
    return true;
  }
  bool operator != (const TopnIpInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TopnIpInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TopnIpInfo &a, TopnIpInfo &b);

typedef struct _TopnDomainInfo__isset {
  _TopnDomainInfo__isset() : domain(false), access(false) {}
  bool domain;
  bool access;
} _TopnDomainInfo__isset;

class TopnDomainInfo {
 public:

  static const char* ascii_fingerprint; // = "EEBC915CE44901401D881E6091423036";
  static const uint8_t binary_fingerprint[16]; // = {0xEE,0xBC,0x91,0x5C,0xE4,0x49,0x01,0x40,0x1D,0x88,0x1E,0x60,0x91,0x42,0x30,0x36};

  TopnDomainInfo() : domain(), access(0) {
  }

  virtual ~TopnDomainInfo() throw() {}

  std::string domain;
  int32_t access;

  _TopnDomainInfo__isset __isset;

  void __set_domain(const std::string& val) {
    domain = val;
  }

  void __set_access(const int32_t val) {
    access = val;
  }

  bool operator == (const TopnDomainInfo & rhs) const
  {
    if (!(domain == rhs.domain))
      return false;
    if (!(access == rhs.access))
      return false;
    return true;
  }
  bool operator != (const TopnDomainInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TopnDomainInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TopnDomainInfo &a, TopnDomainInfo &b);

typedef struct _TopnDnameInfo__isset {
  _TopnDnameInfo__isset() : dname(false), access(false) {}
  bool dname;
  bool access;
} _TopnDnameInfo__isset;

class TopnDnameInfo {
 public:

  static const char* ascii_fingerprint; // = "EEBC915CE44901401D881E6091423036";
  static const uint8_t binary_fingerprint[16]; // = {0xEE,0xBC,0x91,0x5C,0xE4,0x49,0x01,0x40,0x1D,0x88,0x1E,0x60,0x91,0x42,0x30,0x36};

  TopnDnameInfo() : dname(), access(0) {
  }

  virtual ~TopnDnameInfo() throw() {}

  std::string dname;
  int32_t access;

  _TopnDnameInfo__isset __isset;

  void __set_dname(const std::string& val) {
    dname = val;
  }

  void __set_access(const int32_t val) {
    access = val;
  }

  bool operator == (const TopnDnameInfo & rhs) const
  {
    if (!(dname == rhs.dname))
      return false;
    if (!(access == rhs.access))
      return false;
    return true;
  }
  bool operator != (const TopnDnameInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TopnDnameInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TopnDnameInfo &a, TopnDnameInfo &b);

typedef struct _HostInfo__isset {
  _HostInfo__isset() : cpu(false), memory(false), nicin(false), nicout(false) {}
  bool cpu;
  bool memory;
  bool nicin;
  bool nicout;
} _HostInfo__isset;

class HostInfo {
 public:

  static const char* ascii_fingerprint; // = "154BB42C2FFD70F8B3993568C50C5613";
  static const uint8_t binary_fingerprint[16]; // = {0x15,0x4B,0xB4,0x2C,0x2F,0xFD,0x70,0xF8,0xB3,0x99,0x35,0x68,0xC5,0x0C,0x56,0x13};

  HostInfo() : cpu(0), memory(0), nicin(0), nicout(0) {
  }

  virtual ~HostInfo() throw() {}

  int32_t cpu;
  int32_t memory;
  int32_t nicin;
  int32_t nicout;

  _HostInfo__isset __isset;

  void __set_cpu(const int32_t val) {
    cpu = val;
  }

  void __set_memory(const int32_t val) {
    memory = val;
  }

  void __set_nicin(const int32_t val) {
    nicin = val;
  }

  void __set_nicout(const int32_t val) {
    nicout = val;
  }

  bool operator == (const HostInfo & rhs) const
  {
    if (!(cpu == rhs.cpu))
      return false;
    if (!(memory == rhs.memory))
      return false;
    if (!(nicin == rhs.nicin))
      return false;
    if (!(nicout == rhs.nicout))
      return false;
    return true;
  }
  bool operator != (const HostInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HostInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(HostInfo &a, HostInfo &b);

typedef struct _HeartBeatState__isset {
  _HeartBeatState__isset() : mState(false), serverState(false) {}
  bool mState;
  bool serverState;
} _HeartBeatState__isset;

class HeartBeatState {
 public:

  static const char* ascii_fingerprint; // = "7D4563655A5F82FED16B1F5CE7672F0F";
  static const uint8_t binary_fingerprint[16]; // = {0x7D,0x45,0x63,0x65,0x5A,0x5F,0x82,0xFE,0xD1,0x6B,0x1F,0x5C,0xE7,0x67,0x2F,0x0F};

  HeartBeatState() : mState((ModuleState::type)0), serverState(0) {
  }

  virtual ~HeartBeatState() throw() {}

  ModuleState::type mState;
  bool serverState;

  _HeartBeatState__isset __isset;

  void __set_mState(const ModuleState::type val) {
    mState = val;
  }

  void __set_serverState(const bool val) {
    serverState = val;
  }

  bool operator == (const HeartBeatState & rhs) const
  {
    if (!(mState == rhs.mState))
      return false;
    if (!(serverState == rhs.serverState))
      return false;
    return true;
  }
  bool operator != (const HeartBeatState &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HeartBeatState & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(HeartBeatState &a, HeartBeatState &b);

typedef struct _IpOverAlarm__isset {
  _IpOverAlarm__isset() : ip(false), qps(false), status(false) {}
  bool ip;
  bool qps;
  bool status;
} _IpOverAlarm__isset;

class IpOverAlarm {
 public:

  static const char* ascii_fingerprint; // = "13EAA24218838F6B07279A3F28B6D9A0";
  static const uint8_t binary_fingerprint[16]; // = {0x13,0xEA,0xA2,0x42,0x18,0x83,0x8F,0x6B,0x07,0x27,0x9A,0x3F,0x28,0xB6,0xD9,0xA0};

  IpOverAlarm() : qps(0), status((AlarmStatus::type)0) {
  }

  virtual ~IpOverAlarm() throw() {}

  IpAddr ip;
  int32_t qps;
  AlarmStatus::type status;

  _IpOverAlarm__isset __isset;

  void __set_ip(const IpAddr& val) {
    ip = val;
  }

  void __set_qps(const int32_t val) {
    qps = val;
  }

  void __set_status(const AlarmStatus::type val) {
    status = val;
  }

  bool operator == (const IpOverAlarm & rhs) const
  {
    if (!(ip == rhs.ip))
      return false;
    if (!(qps == rhs.qps))
      return false;
    if (!(status == rhs.status))
      return false;
    return true;
  }
  bool operator != (const IpOverAlarm &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IpOverAlarm & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(IpOverAlarm &a, IpOverAlarm &b);

typedef struct _DomainOverAlarm__isset {
  _DomainOverAlarm__isset() : domain(false), qps(false), status(false) {}
  bool domain;
  bool qps;
  bool status;
} _DomainOverAlarm__isset;

class DomainOverAlarm {
 public:

  static const char* ascii_fingerprint; // = "96C988B79E91E91C48D2DFD60D1C05CF";
  static const uint8_t binary_fingerprint[16]; // = {0x96,0xC9,0x88,0xB7,0x9E,0x91,0xE9,0x1C,0x48,0xD2,0xDF,0xD6,0x0D,0x1C,0x05,0xCF};

  DomainOverAlarm() : domain(), qps(0), status((AlarmStatus::type)0) {
  }

  virtual ~DomainOverAlarm() throw() {}

  std::string domain;
  int32_t qps;
  AlarmStatus::type status;

  _DomainOverAlarm__isset __isset;

  void __set_domain(const std::string& val) {
    domain = val;
  }

  void __set_qps(const int32_t val) {
    qps = val;
  }

  void __set_status(const AlarmStatus::type val) {
    status = val;
  }

  bool operator == (const DomainOverAlarm & rhs) const
  {
    if (!(domain == rhs.domain))
      return false;
    if (!(qps == rhs.qps))
      return false;
    if (!(status == rhs.status))
      return false;
    return true;
  }
  bool operator != (const DomainOverAlarm &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DomainOverAlarm & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(DomainOverAlarm &a, DomainOverAlarm &b);

typedef struct _NginxServerAlarm__isset {
  _NginxServerAlarm__isset() : serverName(false), localUrl(false), status(false) {}
  bool serverName;
  bool localUrl;
  bool status;
} _NginxServerAlarm__isset;

class NginxServerAlarm {
 public:

  static const char* ascii_fingerprint; // = "4F8ABE747D9A2DF14F7E84DDBE60D55C";
  static const uint8_t binary_fingerprint[16]; // = {0x4F,0x8A,0xBE,0x74,0x7D,0x9A,0x2D,0xF1,0x4F,0x7E,0x84,0xDD,0xBE,0x60,0xD5,0x5C};

  NginxServerAlarm() : serverName(), localUrl(), status((AlarmStatus::type)0) {
  }

  virtual ~NginxServerAlarm() throw() {}

  std::string serverName;
  std::string localUrl;
  AlarmStatus::type status;

  _NginxServerAlarm__isset __isset;

  void __set_serverName(const std::string& val) {
    serverName = val;
  }

  void __set_localUrl(const std::string& val) {
    localUrl = val;
  }

  void __set_status(const AlarmStatus::type val) {
    status = val;
  }

  bool operator == (const NginxServerAlarm & rhs) const
  {
    if (!(serverName == rhs.serverName))
      return false;
    if (!(localUrl == rhs.localUrl))
      return false;
    if (!(status == rhs.status))
      return false;
    return true;
  }
  bool operator != (const NginxServerAlarm &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NginxServerAlarm & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(NginxServerAlarm &a, NginxServerAlarm &b);

typedef struct _ZoneRequestReport__isset {
  _ZoneRequestReport__isset() : zoneName(false), viewName(false), data(false) {}
  bool zoneName;
  bool viewName;
  bool data;
} _ZoneRequestReport__isset;

class ZoneRequestReport {
 public:

  static const char* ascii_fingerprint; // = "4D7DD3430049298E2D7E6201D4E8B827";
  static const uint8_t binary_fingerprint[16]; // = {0x4D,0x7D,0xD3,0x43,0x00,0x49,0x29,0x8E,0x2D,0x7E,0x62,0x01,0xD4,0xE8,0xB8,0x27};

  ZoneRequestReport() : zoneName(), viewName() {
  }

  virtual ~ZoneRequestReport() throw() {}

  std::string zoneName;
  std::string viewName;
  RequestReportInfo data;

  _ZoneRequestReport__isset __isset;

  void __set_zoneName(const std::string& val) {
    zoneName = val;
  }

  void __set_viewName(const std::string& val) {
    viewName = val;
  }

  void __set_data(const RequestReportInfo& val) {
    data = val;
  }

  bool operator == (const ZoneRequestReport & rhs) const
  {
    if (!(zoneName == rhs.zoneName))
      return false;
    if (!(viewName == rhs.viewName))
      return false;
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const ZoneRequestReport &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ZoneRequestReport & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ZoneRequestReport &a, ZoneRequestReport &b);

typedef struct _ZoneAnswerReport__isset {
  _ZoneAnswerReport__isset() : zoneName(false), viewName(false), data(false) {}
  bool zoneName;
  bool viewName;
  bool data;
} _ZoneAnswerReport__isset;

class ZoneAnswerReport {
 public:

  static const char* ascii_fingerprint; // = "D81548DBE1CF3015E17791692C4E5463";
  static const uint8_t binary_fingerprint[16]; // = {0xD8,0x15,0x48,0xDB,0xE1,0xCF,0x30,0x15,0xE1,0x77,0x91,0x69,0x2C,0x4E,0x54,0x63};

  ZoneAnswerReport() : zoneName(), viewName() {
  }

  virtual ~ZoneAnswerReport() throw() {}

  std::string zoneName;
  std::string viewName;
  GeneralReportInfo data;

  _ZoneAnswerReport__isset __isset;

  void __set_zoneName(const std::string& val) {
    zoneName = val;
  }

  void __set_viewName(const std::string& val) {
    viewName = val;
  }

  void __set_data(const GeneralReportInfo& val) {
    data = val;
  }

  bool operator == (const ZoneAnswerReport & rhs) const
  {
    if (!(zoneName == rhs.zoneName))
      return false;
    if (!(viewName == rhs.viewName))
      return false;
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const ZoneAnswerReport &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ZoneAnswerReport & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ZoneAnswerReport &a, ZoneAnswerReport &b);

typedef struct _XproxyReport__isset {
  _XproxyReport__isset() : xproxy(false), data(false) {}
  bool xproxy;
  bool data;
} _XproxyReport__isset;

class XproxyReport {
 public:

  static const char* ascii_fingerprint; // = "107E378D8E4593420B89A5C9A71CD82A";
  static const uint8_t binary_fingerprint[16]; // = {0x10,0x7E,0x37,0x8D,0x8E,0x45,0x93,0x42,0x0B,0x89,0xA5,0xC9,0xA7,0x1C,0xD8,0x2A};

  XproxyReport() : xproxy() {
  }

  virtual ~XproxyReport() throw() {}

  std::string xproxy;
  XProxyReportInfo data;

  _XproxyReport__isset __isset;

  void __set_xproxy(const std::string& val) {
    xproxy = val;
  }

  void __set_data(const XProxyReportInfo& val) {
    data = val;
  }

  bool operator == (const XproxyReport & rhs) const
  {
    if (!(xproxy == rhs.xproxy))
      return false;
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const XproxyReport &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const XproxyReport & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(XproxyReport &a, XproxyReport &b);

typedef struct _XforwardReport__isset {
  _XforwardReport__isset() : xforward(false), data(false) {}
  bool xforward;
  bool data;
} _XforwardReport__isset;

class XforwardReport {
 public:

  static const char* ascii_fingerprint; // = "AFD8F2FE5294FE5E66108B008183156D";
  static const uint8_t binary_fingerprint[16]; // = {0xAF,0xD8,0xF2,0xFE,0x52,0x94,0xFE,0x5E,0x66,0x10,0x8B,0x00,0x81,0x83,0x15,0x6D};

  XforwardReport() : xforward() {
  }

  virtual ~XforwardReport() throw() {}

  std::string xforward;
  XForwardReportInfo data;

  _XforwardReport__isset __isset;

  void __set_xforward(const std::string& val) {
    xforward = val;
  }

  void __set_data(const XForwardReportInfo& val) {
    data = val;
  }

  bool operator == (const XforwardReport & rhs) const
  {
    if (!(xforward == rhs.xforward))
      return false;
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const XforwardReport &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const XforwardReport & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(XforwardReport &a, XforwardReport &b);

typedef struct _RedirectServerInfo__isset {
  _RedirectServerInfo__isset() : ip(false), weight(false), status(false) {}
  bool ip;
  bool weight;
  bool status;
} _RedirectServerInfo__isset;

class RedirectServerInfo {
 public:

  static const char* ascii_fingerprint; // = "84632E6A4367F107E1E7EAF900AFEA6B";
  static const uint8_t binary_fingerprint[16]; // = {0x84,0x63,0x2E,0x6A,0x43,0x67,0xF1,0x07,0xE1,0xE7,0xEA,0xF9,0x00,0xAF,0xEA,0x6B};

  RedirectServerInfo() : weight(0), status((Status::type)0) {
  }

  virtual ~RedirectServerInfo() throw() {}

  IpAddr ip;
  int32_t weight;
  Status::type status;

  _RedirectServerInfo__isset __isset;

  void __set_ip(const IpAddr& val) {
    ip = val;
  }

  void __set_weight(const int32_t val) {
    weight = val;
    __isset.weight = true;
  }

  void __set_status(const Status::type val) {
    status = val;
    __isset.status = true;
  }

  bool operator == (const RedirectServerInfo & rhs) const
  {
    if (!(ip == rhs.ip))
      return false;
    if (__isset.weight != rhs.__isset.weight)
      return false;
    else if (__isset.weight && !(weight == rhs.weight))
      return false;
    if (__isset.status != rhs.__isset.status)
      return false;
    else if (__isset.status && !(status == rhs.status))
      return false;
    return true;
  }
  bool operator != (const RedirectServerInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RedirectServerInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RedirectServerInfo &a, RedirectServerInfo &b);

typedef struct _NginxProxyInfo__isset {
  _NginxProxyInfo__isset() : proxyDomain(false), proxyPort(false), targetIpAddr(false), targetURL(false), protocol(false) {}
  bool proxyDomain;
  bool proxyPort;
  bool targetIpAddr;
  bool targetURL;
  bool protocol;
} _NginxProxyInfo__isset;

class NginxProxyInfo {
 public:

  static const char* ascii_fingerprint; // = "C54745CF5E2800BFF941910D5280EE48";
  static const uint8_t binary_fingerprint[16]; // = {0xC5,0x47,0x45,0xCF,0x5E,0x28,0x00,0xBF,0xF9,0x41,0x91,0x0D,0x52,0x80,0xEE,0x48};

  NginxProxyInfo() : proxyDomain(), proxyPort(0), targetIpAddr(), targetURL(), protocol() {
  }

  virtual ~NginxProxyInfo() throw() {}

  std::string proxyDomain;
  int32_t proxyPort;
  std::string targetIpAddr;
  std::string targetURL;
  std::string protocol;

  _NginxProxyInfo__isset __isset;

  void __set_proxyDomain(const std::string& val) {
    proxyDomain = val;
  }

  void __set_proxyPort(const int32_t val) {
    proxyPort = val;
  }

  void __set_targetIpAddr(const std::string& val) {
    targetIpAddr = val;
  }

  void __set_targetURL(const std::string& val) {
    targetURL = val;
  }

  void __set_protocol(const std::string& val) {
    protocol = val;
  }

  bool operator == (const NginxProxyInfo & rhs) const
  {
    if (!(proxyDomain == rhs.proxyDomain))
      return false;
    if (!(proxyPort == rhs.proxyPort))
      return false;
    if (!(targetIpAddr == rhs.targetIpAddr))
      return false;
    if (!(targetURL == rhs.targetURL))
      return false;
    if (!(protocol == rhs.protocol))
      return false;
    return true;
  }
  bool operator != (const NginxProxyInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NginxProxyInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(NginxProxyInfo &a, NginxProxyInfo &b);

typedef struct _CateWeight__isset {
  _CateWeight__isset() : cate(false), weight(false) {}
  bool cate;
  bool weight;
} _CateWeight__isset;

class CateWeight {
 public:

  static const char* ascii_fingerprint; // = "989D1F1AE8D148D5E2119FFEC4BBBEE3";
  static const uint8_t binary_fingerprint[16]; // = {0x98,0x9D,0x1F,0x1A,0xE8,0xD1,0x48,0xD5,0xE2,0x11,0x9F,0xFE,0xC4,0xBB,0xBE,0xE3};

  CateWeight() : cate(0), weight(0) {
  }

  virtual ~CateWeight() throw() {}

  int32_t cate;
  int32_t weight;

  _CateWeight__isset __isset;

  void __set_cate(const int32_t val) {
    cate = val;
  }

  void __set_weight(const int32_t val) {
    weight = val;
  }

  bool operator == (const CateWeight & rhs) const
  {
    if (!(cate == rhs.cate))
      return false;
    if (!(weight == rhs.weight))
      return false;
    return true;
  }
  bool operator != (const CateWeight &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CateWeight & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(CateWeight &a, CateWeight &b);

}}} // namespace

#endif
