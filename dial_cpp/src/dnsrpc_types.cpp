/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "dnsrpc_types.h"

#include <algorithm>

namespace rpc { namespace yamutech { namespace com {

int _kModuleTypeValues[] = {
  ModuleType::CRM,
  ModuleType::DIALING
};
const char* _kModuleTypeNames[] = {
  "CRM",
  "DIALING"
};
const std::map<int, const char*> _ModuleType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kModuleTypeValues, _kModuleTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kLogLevelValues[] = {
  LogLevel::NORMAL,
  LogLevel::WARN,
  LogLevel::ERROR
};
const char* _kLogLevelNames[] = {
  "NORMAL",
  "WARN",
  "ERROR"
};
const std::map<int, const char*> _LogLevel_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kLogLevelValues, _kLogLevelNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kDialStatusValues[] = {
  DialStatus::OK,
  DialStatus::FAIL
};
const char* _kDialStatusNames[] = {
  "OK",
  "FAIL"
};
const std::map<int, const char*> _DialStatus_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kDialStatusValues, _kDialStatusNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kRetCodeValues[] = {
  RetCode::OK,
  RetCode::FAIL
};
const char* _kRetCodeNames[] = {
  "OK",
  "FAIL"
};
const std::map<int, const char*> _RetCode_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kRetCodeValues, _kRetCodeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kSecParamNameValues[] = {
  SecParamName::SEC_PARAM_WHITELIST,
  SecParamName::SEC_PARAM_ACL,
  SecParamName::SEC_PARAM_QPSLIMIT,
  SecParamName::SEC_PARAM_BLACKLIST,
  SecParamName::SEC_PARAM_TCP,
  SecParamName::SEC_PARAM_TCPLIMIT,
  SecParamName::SEC_PARAM_ICMPLIMIT,
  SecParamName::SEC_PARAM_CACHEVIRUSLIMIT,
  SecParamName::SEC_PARAM_FILTERIP,
  SecParamName::SEC_PARAM_FILTERUDP,
  SecParamName::SEC_PARAM_FILTERDNS,
  SecParamName::SEC_PARAM_DDOSDEFEND,
  SecParamName::SEC_PARAM_DNSFLOODDEFND
};
const char* _kSecParamNameNames[] = {
  "SEC_PARAM_WHITELIST",
  "SEC_PARAM_ACL",
  "SEC_PARAM_QPSLIMIT",
  "SEC_PARAM_BLACKLIST",
  "SEC_PARAM_TCP",
  "SEC_PARAM_TCPLIMIT",
  "SEC_PARAM_ICMPLIMIT",
  "SEC_PARAM_CACHEVIRUSLIMIT",
  "SEC_PARAM_FILTERIP",
  "SEC_PARAM_FILTERUDP",
  "SEC_PARAM_FILTERDNS",
  "SEC_PARAM_DDOSDEFEND",
  "SEC_PARAM_DNSFLOODDEFND"
};
const std::map<int, const char*> _SecParamName_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(13, _kSecParamNameValues, _kSecParamNameNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kDnsParamNameValues[] = {
  DnsParamName::DNS_PARAM_AUTH,
  DnsParamName::DNS_PARAM_XFORWARD,
  DnsParamName::DNS_PARAM_TTL,
  DnsParamName::DNS_PARAM_REDIRECT,
  DnsParamName::DNS_PARAM_SPREAD,
  DnsParamName::DNS_PARAM_RECUSIVE,
  DnsParamName::DNS_PARAM_CACHE
};
const char* _kDnsParamNameNames[] = {
  "DNS_PARAM_AUTH",
  "DNS_PARAM_XFORWARD",
  "DNS_PARAM_TTL",
  "DNS_PARAM_REDIRECT",
  "DNS_PARAM_SPREAD",
  "DNS_PARAM_RECUSIVE",
  "DNS_PARAM_CACHE"
};
const std::map<int, const char*> _DnsParamName_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(7, _kDnsParamNameValues, _kDnsParamNameNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kStatusValues[] = {
  Status::STATUS_INACTIVE,
  Status::STATUS_ACTIVE
};
const char* _kStatusNames[] = {
  "STATUS_INACTIVE",
  "STATUS_ACTIVE"
};
const std::map<int, const char*> _Status_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kStatusValues, _kStatusNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kDialMethodValues[] = {
  DialMethod::DIAL_TCPPORT,
  DialMethod::DIAL_IMCP,
  DialMethod::DIAL_HTTPGET,
  DialMethod::DIAL_DATABASE,
  DialMethod::DIAL_EXTHTTPGET
};
const char* _kDialMethodNames[] = {
  "DIAL_TCPPORT",
  "DIAL_IMCP",
  "DIAL_HTTPGET",
  "DIAL_DATABASE",
  "DIAL_EXTHTTPGET"
};
const std::map<int, const char*> _DialMethod_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(5, _kDialMethodValues, _kDialMethodNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kAlarmStatusValues[] = {
  AlarmStatus::ALARM_OFF,
  AlarmStatus::ALARM_ON
};
const char* _kAlarmStatusNames[] = {
  "ALARM_OFF",
  "ALARM_ON"
};
const std::map<int, const char*> _AlarmStatus_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kAlarmStatusValues, _kAlarmStatusNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kAlarmTypeValues[] = {
  AlarmType::DNSysDeviceQpsOverAlarm,
  AlarmType::DNSysDeviceRequestIpOverAlarm,
  AlarmType::DNSysDeviceDomainQpsOverAlarm,
  AlarmType::DNSysDeviceDnameQpsOverAlarm,
  AlarmType::DNSysDeviceFocusDomainAlarm,
  AlarmType::DeviceCpuUsageAlarm,
  AlarmType::DeviceMemoryUsageAlarm,
  AlarmType::DevicePartitionUsageAlarm,
  AlarmType::DeviceNicFlowOverAlarm,
  AlarmType::NoneDeviceConnectionAlarm,
  AlarmType::DeviceProcessAlarm,
  AlarmType::DNSysDeviceServfailOverAlarm,
  AlarmType::ForwardFailAlarm,
  AlarmType::ProxyFailAlarm,
  AlarmType::ServiceFailAlarm,
  AlarmType::DiskFailAlarm,
  AlarmType::LogAlarm,
  AlarmType::RecordialFailAlarm,
  AlarmType::RedirectFailAlarm,
  AlarmType::NginxServerFailAlarm,
  AlarmType::DhcpPoolAlarm,
  AlarmType::DhcpIpAddressConflictsAlarm,
  AlarmType::DhcpQpsAlarm,
  AlarmType::DhcpIlegalServerAlarm,
  AlarmType::DDNSAlarm,
  AlarmType::HostHaAlarm
};
const char* _kAlarmTypeNames[] = {
  "DNSysDeviceQpsOverAlarm",
  "DNSysDeviceRequestIpOverAlarm",
  "DNSysDeviceDomainQpsOverAlarm",
  "DNSysDeviceDnameQpsOverAlarm",
  "DNSysDeviceFocusDomainAlarm",
  "DeviceCpuUsageAlarm",
  "DeviceMemoryUsageAlarm",
  "DevicePartitionUsageAlarm",
  "DeviceNicFlowOverAlarm",
  "NoneDeviceConnectionAlarm",
  "DeviceProcessAlarm",
  "DNSysDeviceServfailOverAlarm",
  "ForwardFailAlarm",
  "ProxyFailAlarm",
  "ServiceFailAlarm",
  "DiskFailAlarm",
  "LogAlarm",
  "RecordialFailAlarm",
  "RedirectFailAlarm",
  "NginxServerFailAlarm",
  "DhcpPoolAlarm",
  "DhcpIpAddressConflictsAlarm",
  "DhcpQpsAlarm",
  "DhcpIlegalServerAlarm",
  "DDNSAlarm",
  "HostHaAlarm"
};
const std::map<int, const char*> _AlarmType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(26, _kAlarmTypeValues, _kAlarmTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kModuleStateValues[] = {
  ModuleState::STARTUP,
  ModuleState::REGISTERED
};
const char* _kModuleStateNames[] = {
  "STARTUP",
  "REGISTERED"
};
const std::map<int, const char*> _ModuleState_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kModuleStateValues, _kModuleStateNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kSysCommandValues[] = {
  SysCommand::RestoreConfig
};
const char* _kSysCommandNames[] = {
  "RestoreConfig"
};
const std::map<int, const char*> _SysCommand_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(1, _kSysCommandValues, _kSysCommandNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kDialServerTypeValues[] = {
  DialServerType::XPROXY,
  DialServerType::REDIRECT,
  DialServerType::XFORWARD
};
const char* _kDialServerTypeNames[] = {
  "XPROXY",
  "REDIRECT",
  "XFORWARD"
};
const std::map<int, const char*> _DialServerType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kDialServerTypeValues, _kDialServerTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kRecordTypeValues[] = {
  RecordType::A,
  RecordType::AAAA,
  RecordType::NS,
  RecordType::CNAME,
  RecordType::PTR,
  RecordType::TXT,
  RecordType::SRV,
  RecordType::NAPTR,
  RecordType::MX
};
const char* _kRecordTypeNames[] = {
  "A",
  "AAAA",
  "NS",
  "CNAME",
  "PTR",
  "TXT",
  "SRV",
  "NAPTR",
  "MX"
};
const std::map<int, const char*> _RecordType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(9, _kRecordTypeValues, _kRecordTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kDNameTypeValues[] = {
  DNameType::DNAME_NONE,
  DNameType::DNAME_WHOLE,
  DNameType::DNAME_PREFIX,
  DNameType::DNAME_POSTFIX
};
const char* _kDNameTypeNames[] = {
  "DNAME_NONE",
  "DNAME_WHOLE",
  "DNAME_PREFIX",
  "DNAME_POSTFIX"
};
const std::map<int, const char*> _DNameType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kDNameTypeValues, _kDNameTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* Xception::ascii_fingerprint = "3F5FC93B338687BC7235B1AB103F47B3";
const uint8_t Xception::binary_fingerprint[16] = {0x3F,0x5F,0xC9,0x3B,0x33,0x86,0x87,0xBC,0x72,0x35,0xB1,0xAB,0x10,0x3F,0x47,0xB3};

uint32_t Xception::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->errorCode);
          this->__isset.errorCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Xception::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Xception");

  xfer += oprot->writeFieldBegin("errorCode", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->errorCode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Xception &a, Xception &b) {
  using ::std::swap;
  swap(a.errorCode, b.errorCode);
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

const char* RetRecord::ascii_fingerprint = "D6FD826D949221396F4FFC3ECCD3D192";
const uint8_t RetRecord::binary_fingerprint[16] = {0xD6,0xFD,0x82,0x6D,0x94,0x92,0x21,0x39,0x6F,0x4F,0xFC,0x3E,0xCC,0xD3,0xD1,0x92};

uint32_t RetRecord::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->recordId);
          this->__isset.recordId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->code = (RetCode::type)ecast0;
          this->__isset.code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RetRecord::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RetRecord");

  xfer += oprot->writeFieldBegin("recordId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->recordId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("code", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RetRecord &a, RetRecord &b) {
  using ::std::swap;
  swap(a.recordId, b.recordId);
  swap(a.code, b.code);
  swap(a.__isset, b.__isset);
}

const char* IpAddr::ascii_fingerprint = "3F5FC93B338687BC7235B1AB103F47B3";
const uint8_t IpAddr::binary_fingerprint[16] = {0x3F,0x5F,0xC9,0x3B,0x33,0x86,0x87,0xBC,0x72,0x35,0xB1,0xAB,0x10,0x3F,0x47,0xB3};

uint32_t IpAddr::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->version);
          this->__isset.version = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->addr);
          this->__isset.addr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t IpAddr::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("IpAddr");

  xfer += oprot->writeFieldBegin("version", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->version);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("addr", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->addr);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(IpAddr &a, IpAddr &b) {
  using ::std::swap;
  swap(a.version, b.version);
  swap(a.addr, b.addr);
  swap(a.__isset, b.__isset);
}

const char* DialNginxServer::ascii_fingerprint = "EEBC915CE44901401D881E6091423036";
const uint8_t DialNginxServer::binary_fingerprint[16] = {0xEE,0xBC,0x91,0x5C,0xE4,0x49,0x01,0x40,0x1D,0x88,0x1E,0x60,0x91,0x42,0x30,0x36};

uint32_t DialNginxServer::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->localURL);
          this->__isset.localURL = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->priority);
          this->__isset.priority = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DialNginxServer::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("DialNginxServer");

  xfer += oprot->writeFieldBegin("localURL", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->localURL);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("priority", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->priority);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DialNginxServer &a, DialNginxServer &b) {
  using ::std::swap;
  swap(a.localURL, b.localURL);
  swap(a.priority, b.priority);
  swap(a.__isset, b.__isset);
}

const char* DialRecordStatus::ascii_fingerprint = "D6FD826D949221396F4FFC3ECCD3D192";
const uint8_t DialRecordStatus::binary_fingerprint[16] = {0xD6,0xFD,0x82,0x6D,0x94,0x92,0x21,0x39,0x6F,0x4F,0xFC,0x3E,0xCC,0xD3,0xD1,0x92};

uint32_t DialRecordStatus::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->rid);
          this->__isset.rid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1;
          xfer += iprot->readI32(ecast1);
          this->status = (DialStatus::type)ecast1;
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DialRecordStatus::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("DialRecordStatus");

  xfer += oprot->writeFieldBegin("rid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->rid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DialRecordStatus &a, DialRecordStatus &b) {
  using ::std::swap;
  swap(a.rid, b.rid);
  swap(a.status, b.status);
  swap(a.__isset, b.__isset);
}

const char* DialNginxStatus::ascii_fingerprint = "2F953DB93A5B385116ABFADC51E7F009";
const uint8_t DialNginxStatus::binary_fingerprint[16] = {0x2F,0x95,0x3D,0xB9,0x3A,0x5B,0x38,0x51,0x16,0xAB,0xFA,0xDC,0x51,0xE7,0xF0,0x09};

uint32_t DialNginxStatus::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->server.read(iprot);
          this->__isset.server = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast2;
          xfer += iprot->readI32(ecast2);
          this->status = (DialStatus::type)ecast2;
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DialNginxStatus::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("DialNginxStatus");

  xfer += oprot->writeFieldBegin("server", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->server.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DialNginxStatus &a, DialNginxStatus &b) {
  using ::std::swap;
  swap(a.server, b.server);
  swap(a.status, b.status);
  swap(a.__isset, b.__isset);
}

const char* DialRecordAlarm::ascii_fingerprint = "0746E9A657B4F93392A42831C03048DA";
const uint8_t DialRecordAlarm::binary_fingerprint[16] = {0x07,0x46,0xE9,0xA6,0x57,0xB4,0xF9,0x33,0x92,0xA4,0x28,0x31,0xC0,0x30,0x48,0xDA};

uint32_t DialRecordAlarm::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ip.read(iprot);
          this->__isset.ip = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->enable);
          this->__isset.enable = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->dial);
          this->__isset.dial = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DialRecordAlarm::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("DialRecordAlarm");

  xfer += oprot->writeFieldBegin("ip", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->ip.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("enable", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->enable);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dial", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->dial);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DialRecordAlarm &a, DialRecordAlarm &b) {
  using ::std::swap;
  swap(a.ip, b.ip);
  swap(a.enable, b.enable);
  swap(a.dial, b.dial);
  swap(a.__isset, b.__isset);
}

const char* DialServerStatus::ascii_fingerprint = "FFD913AA57DE1D8059AEF9A11DA430B1";
const uint8_t DialServerStatus::binary_fingerprint[16] = {0xFF,0xD9,0x13,0xAA,0x57,0xDE,0x1D,0x80,0x59,0xAE,0xF9,0xA1,0x1D,0xA4,0x30,0xB1};

uint32_t DialServerStatus::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ip.read(iprot);
          this->__isset.ip = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast3;
          xfer += iprot->readI32(ecast3);
          this->status = (DialStatus::type)ecast3;
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DialServerStatus::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("DialServerStatus");

  xfer += oprot->writeFieldBegin("ip", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->ip.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DialServerStatus &a, DialServerStatus &b) {
  using ::std::swap;
  swap(a.ip, b.ip);
  swap(a.status, b.status);
  swap(a.__isset, b.__isset);
}

const char* IpsecAddress::ascii_fingerprint = "9A8F93F25ADECFCB7475FE2B2CCBA45A";
const uint8_t IpsecAddress::binary_fingerprint[16] = {0x9A,0x8F,0x93,0xF2,0x5A,0xDE,0xCF,0xCB,0x74,0x75,0xFE,0x2B,0x2C,0xCB,0xA4,0x5A};

uint32_t IpsecAddress::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ip.read(iprot);
          this->__isset.ip = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->mask);
          this->__isset.mask = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t IpsecAddress::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("IpsecAddress");

  xfer += oprot->writeFieldBegin("ip", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->ip.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("mask", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->mask);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(IpsecAddress &a, IpsecAddress &b) {
  using ::std::swap;
  swap(a.ip, b.ip);
  swap(a.mask, b.mask);
  swap(a.__isset, b.__isset);
}

const char* DomainInfo::ascii_fingerprint = "07A9615F837F7D0A952B595DD3020972";
const uint8_t DomainInfo::binary_fingerprint[16] = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

uint32_t DomainInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->typ);
          this->__isset.typ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DomainInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("DomainInfo");

  xfer += oprot->writeFieldBegin("typ", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->typ);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DomainInfo &a, DomainInfo &b) {
  using ::std::swap;
  swap(a.typ, b.typ);
  swap(a.name, b.name);
  swap(a.__isset, b.__isset);
}

const char* RangeInfo::ascii_fingerprint = "C88FB7958D86460D03E699333A272947";
const uint8_t RangeInfo::binary_fingerprint[16] = {0xC8,0x8F,0xB7,0x95,0x8D,0x86,0x46,0x0D,0x03,0xE6,0x99,0x33,0x3A,0x27,0x29,0x47};

uint32_t RangeInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->start);
          this->__isset.start = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->ends);
          this->__isset.ends = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RangeInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RangeInfo");

  xfer += oprot->writeFieldBegin("start", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->start);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ends", ::apache::thrift::protocol::T_I16, 2);
  xfer += oprot->writeI16(this->ends);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RangeInfo &a, RangeInfo &b) {
  using ::std::swap;
  swap(a.start, b.start);
  swap(a.ends, b.ends);
  swap(a.__isset, b.__isset);
}

const char* SysIpSec::ascii_fingerprint = "3A19231F195BACAABE71B5EADE6FF1DC";
const uint8_t SysIpSec::binary_fingerprint[16] = {0x3A,0x19,0x23,0x1F,0x19,0x5B,0xAC,0xAA,0xBE,0x71,0xB5,0xEA,0xDE,0x6F,0xF1,0xDC};

uint32_t SysIpSec::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ipsec.read(iprot);
          this->__isset.ipsec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SysIpSec::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("SysIpSec");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ipsec", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->ipsec.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SysIpSec &a, SysIpSec &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.ipsec, b.ipsec);
  swap(a.__isset, b.__isset);
}

const char* AclInfo::ascii_fingerprint = "F07ADD7E9B667BFAA72D29B39BD71E7F";
const uint8_t AclInfo::binary_fingerprint[16] = {0xF0,0x7A,0xDD,0x7E,0x9B,0x66,0x7B,0xFA,0xA7,0x2D,0x29,0xB3,0x9B,0xD7,0x1E,0x7F};

uint32_t AclInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->priority);
          this->__isset.priority = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->srcIpSec.read(iprot);
          this->__isset.srcIpSec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dstIpSec.read(iprot);
          this->__isset.dstIpSec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->srcPortSec.read(iprot);
          this->__isset.srcPortSec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dstPortSec.read(iprot);
          this->__isset.dstPortSec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->frameTypeSec.read(iprot);
          this->__isset.frameTypeSec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ipProtoSec.read(iprot);
          this->__isset.ipProtoSec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->qpsLimit);
          this->__isset.qpsLimit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AclInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AclInfo");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->id);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.priority) {
    xfer += oprot->writeFieldBegin("priority", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->priority);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.srcIpSec) {
    xfer += oprot->writeFieldBegin("srcIpSec", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->srcIpSec.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.dstIpSec) {
    xfer += oprot->writeFieldBegin("dstIpSec", ::apache::thrift::protocol::T_STRUCT, 4);
    xfer += this->dstIpSec.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.srcPortSec) {
    xfer += oprot->writeFieldBegin("srcPortSec", ::apache::thrift::protocol::T_STRUCT, 5);
    xfer += this->srcPortSec.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.dstPortSec) {
    xfer += oprot->writeFieldBegin("dstPortSec", ::apache::thrift::protocol::T_STRUCT, 6);
    xfer += this->dstPortSec.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.frameTypeSec) {
    xfer += oprot->writeFieldBegin("frameTypeSec", ::apache::thrift::protocol::T_STRUCT, 7);
    xfer += this->frameTypeSec.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ipProtoSec) {
    xfer += oprot->writeFieldBegin("ipProtoSec", ::apache::thrift::protocol::T_STRUCT, 8);
    xfer += this->ipProtoSec.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.qpsLimit) {
    xfer += oprot->writeFieldBegin("qpsLimit", ::apache::thrift::protocol::T_I32, 9);
    xfer += oprot->writeI32(this->qpsLimit);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AclInfo &a, AclInfo &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.priority, b.priority);
  swap(a.srcIpSec, b.srcIpSec);
  swap(a.dstIpSec, b.dstIpSec);
  swap(a.srcPortSec, b.srcPortSec);
  swap(a.dstPortSec, b.dstPortSec);
  swap(a.frameTypeSec, b.frameTypeSec);
  swap(a.ipProtoSec, b.ipProtoSec);
  swap(a.qpsLimit, b.qpsLimit);
  swap(a.__isset, b.__isset);
}

const char* ZoneInfo::ascii_fingerprint = "BFF00B342A14BA3ADD9B5EF49A6DC648";
const uint8_t ZoneInfo::binary_fingerprint[16] = {0xBF,0xF0,0x0B,0x34,0x2A,0x14,0xBA,0x3A,0xDD,0x9B,0x5E,0xF4,0x9A,0x6D,0xC6,0x48};

uint32_t ZoneInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->viewName);
          this->__isset.viewName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->typ);
          this->__isset.typ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->nsRecord);
          this->__isset.nsRecord = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->aRecord);
          this->__isset.aRecord = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->soaName);
          this->__isset.soaName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->soaHost);
          this->__isset.soaHost = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->serial);
          this->__isset.serial = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->refresh);
          this->__isset.refresh = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->retries);
          this->__isset.retries = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->expire);
          this->__isset.expire = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->minTtl);
          this->__isset.minTtl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ZoneInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ZoneInfo");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("viewName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->viewName);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.typ) {
    xfer += oprot->writeFieldBegin("typ", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->typ);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.nsRecord) {
    xfer += oprot->writeFieldBegin("nsRecord", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->nsRecord);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.aRecord) {
    xfer += oprot->writeFieldBegin("aRecord", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->aRecord);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.soaName) {
    xfer += oprot->writeFieldBegin("soaName", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->soaName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.soaHost) {
    xfer += oprot->writeFieldBegin("soaHost", ::apache::thrift::protocol::T_STRING, 7);
    xfer += oprot->writeString(this->soaHost);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.serial) {
    xfer += oprot->writeFieldBegin("serial", ::apache::thrift::protocol::T_I32, 8);
    xfer += oprot->writeI32(this->serial);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.refresh) {
    xfer += oprot->writeFieldBegin("refresh", ::apache::thrift::protocol::T_I32, 9);
    xfer += oprot->writeI32(this->refresh);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.retries) {
    xfer += oprot->writeFieldBegin("retries", ::apache::thrift::protocol::T_I32, 10);
    xfer += oprot->writeI32(this->retries);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.expire) {
    xfer += oprot->writeFieldBegin("expire", ::apache::thrift::protocol::T_I32, 11);
    xfer += oprot->writeI32(this->expire);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.minTtl) {
    xfer += oprot->writeFieldBegin("minTtl", ::apache::thrift::protocol::T_I32, 12);
    xfer += oprot->writeI32(this->minTtl);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ZoneInfo &a, ZoneInfo &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.viewName, b.viewName);
  swap(a.typ, b.typ);
  swap(a.nsRecord, b.nsRecord);
  swap(a.aRecord, b.aRecord);
  swap(a.soaName, b.soaName);
  swap(a.soaHost, b.soaHost);
  swap(a.serial, b.serial);
  swap(a.refresh, b.refresh);
  swap(a.retries, b.retries);
  swap(a.expire, b.expire);
  swap(a.minTtl, b.minTtl);
  swap(a.__isset, b.__isset);
}

const char* DnsQueryResultSRV::ascii_fingerprint = "5693FA1A53F649BF7C48D3F739E3EC51";
const uint8_t DnsQueryResultSRV::binary_fingerprint[16] = {0x56,0x93,0xFA,0x1A,0x53,0xF6,0x49,0xBF,0x7C,0x48,0xD3,0xF7,0x39,0xE3,0xEC,0x51};

uint32_t DnsQueryResultSRV::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->priority);
          this->__isset.priority = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->weight);
          this->__isset.weight = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->port);
          this->__isset.port = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->target);
          this->__isset.target = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DnsQueryResultSRV::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("DnsQueryResultSRV");

  xfer += oprot->writeFieldBegin("priority", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->priority);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("weight", ::apache::thrift::protocol::T_I16, 2);
  xfer += oprot->writeI16(this->weight);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("port", ::apache::thrift::protocol::T_I16, 3);
  xfer += oprot->writeI16(this->port);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("target", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->target);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DnsQueryResultSRV &a, DnsQueryResultSRV &b) {
  using ::std::swap;
  swap(a.priority, b.priority);
  swap(a.weight, b.weight);
  swap(a.port, b.port);
  swap(a.target, b.target);
  swap(a.__isset, b.__isset);
}

const char* DnsQueryResultNAPTR::ascii_fingerprint = "21E6A34A2EFE8E8193B7ED409BF308BF";
const uint8_t DnsQueryResultNAPTR::binary_fingerprint[16] = {0x21,0xE6,0xA3,0x4A,0x2E,0xFE,0x8E,0x81,0x93,0xB7,0xED,0x40,0x9B,0xF3,0x08,0xBF};

uint32_t DnsQueryResultNAPTR::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->order);
          this->__isset.order = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->pref);
          this->__isset.pref = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->flags);
          this->__isset.flags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->svc);
          this->__isset.svc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->regexp);
          this->__isset.regexp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->domainName);
          this->__isset.domainName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DnsQueryResultNAPTR::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("DnsQueryResultNAPTR");

  xfer += oprot->writeFieldBegin("order", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->order);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pref", ::apache::thrift::protocol::T_I16, 2);
  xfer += oprot->writeI16(this->pref);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->flags);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("svc", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->svc);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("regexp", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->regexp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("domainName", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->domainName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DnsQueryResultNAPTR &a, DnsQueryResultNAPTR &b) {
  using ::std::swap;
  swap(a.order, b.order);
  swap(a.pref, b.pref);
  swap(a.flags, b.flags);
  swap(a.svc, b.svc);
  swap(a.regexp, b.regexp);
  swap(a.domainName, b.domainName);
  swap(a.__isset, b.__isset);
}

const char* DnsQueryResultMX::ascii_fingerprint = "15896F1A4438B1ECBB80CEA66AD0C4C5";
const uint8_t DnsQueryResultMX::binary_fingerprint[16] = {0x15,0x89,0x6F,0x1A,0x44,0x38,0xB1,0xEC,0xBB,0x80,0xCE,0xA6,0x6A,0xD0,0xC4,0xC5};

uint32_t DnsQueryResultMX::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->pref);
          this->__isset.pref = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->domainName);
          this->__isset.domainName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DnsQueryResultMX::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("DnsQueryResultMX");

  xfer += oprot->writeFieldBegin("pref", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->pref);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("domainName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->domainName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DnsQueryResultMX &a, DnsQueryResultMX &b) {
  using ::std::swap;
  swap(a.pref, b.pref);
  swap(a.domainName, b.domainName);
  swap(a.__isset, b.__isset);
}

const char* DnsQueryResult::ascii_fingerprint = "575675813C2D67D7977730AAFC8780FB";
const uint8_t DnsQueryResult::binary_fingerprint[16] = {0x57,0x56,0x75,0x81,0x3C,0x2D,0x67,0xD7,0x97,0x77,0x30,0xAA,0xFC,0x87,0x80,0xFB};

uint32_t DnsQueryResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->a);
          this->__isset.a = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->aaaa);
          this->__isset.aaaa = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ns);
          this->__isset.ns = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->cname);
          this->__isset.cname = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ptr);
          this->__isset.ptr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->txt);
          this->__isset.txt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->srv.read(iprot);
          this->__isset.srv = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->naptr.read(iprot);
          this->__isset.naptr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->mx.read(iprot);
          this->__isset.mx = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DnsQueryResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("DnsQueryResult");

  xfer += oprot->writeFieldBegin("a", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->a);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("aaaa", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->aaaa);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ns", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->ns);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cname", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->cname);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ptr", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->ptr);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("txt", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->txt);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("srv", ::apache::thrift::protocol::T_STRUCT, 7);
  xfer += this->srv.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("naptr", ::apache::thrift::protocol::T_STRUCT, 8);
  xfer += this->naptr.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("mx", ::apache::thrift::protocol::T_STRUCT, 9);
  xfer += this->mx.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DnsQueryResult &a, DnsQueryResult &b) {
  using ::std::swap;
  swap(a.a, b.a);
  swap(a.aaaa, b.aaaa);
  swap(a.ns, b.ns);
  swap(a.cname, b.cname);
  swap(a.ptr, b.ptr);
  swap(a.txt, b.txt);
  swap(a.srv, b.srv);
  swap(a.naptr, b.naptr);
  swap(a.mx, b.mx);
  swap(a.__isset, b.__isset);
}

const char* RecordInfo::ascii_fingerprint = "5EFD6D61C906EBE223C35CF06CBEE2C6";
const uint8_t RecordInfo::binary_fingerprint[16] = {0x5E,0xFD,0x6D,0x61,0xC9,0x06,0xEB,0xE2,0x23,0xC3,0x5C,0xF0,0x6C,0xBE,0xE2,0xC6};

uint32_t RecordInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->viewName);
          this->__isset.viewName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->zoneName);
          this->__isset.zoneName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->typ);
          this->__isset.typ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->result.read(iprot);
          this->__isset.result = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ttl);
          this->__isset.ttl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->weight);
          this->__isset.weight = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast4;
          xfer += iprot->readI32(ecast4);
          this->status = (Status::type)ecast4;
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->recordId);
          this->__isset.recordId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RecordInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RecordInfo");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("viewName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->viewName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("zoneName", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->zoneName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("typ", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->typ);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("result", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += this->result.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.ttl) {
    xfer += oprot->writeFieldBegin("ttl", ::apache::thrift::protocol::T_I32, 6);
    xfer += oprot->writeI32(this->ttl);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.weight) {
    xfer += oprot->writeFieldBegin("weight", ::apache::thrift::protocol::T_I32, 7);
    xfer += oprot->writeI32(this->weight);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.status) {
    xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 8);
    xfer += oprot->writeI32((int32_t)this->status);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("recordId", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->recordId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RecordInfo &a, RecordInfo &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.viewName, b.viewName);
  swap(a.zoneName, b.zoneName);
  swap(a.typ, b.typ);
  swap(a.result, b.result);
  swap(a.ttl, b.ttl);
  swap(a.weight, b.weight);
  swap(a.status, b.status);
  swap(a.recordId, b.recordId);
  swap(a.__isset, b.__isset);
}

const char* ProxyServer::ascii_fingerprint = "13EAA24218838F6B07279A3F28B6D9A0";
const uint8_t ProxyServer::binary_fingerprint[16] = {0x13,0xEA,0xA2,0x42,0x18,0x83,0x8F,0x6B,0x07,0x27,0x9A,0x3F,0x28,0xB6,0xD9,0xA0};

uint32_t ProxyServer::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ip.read(iprot);
          this->__isset.ip = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->weight);
          this->__isset.weight = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast5;
          xfer += iprot->readI32(ecast5);
          this->status = (Status::type)ecast5;
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProxyServer::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ProxyServer");

  xfer += oprot->writeFieldBegin("ip", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->ip.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("weight", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->weight);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ProxyServer &a, ProxyServer &b) {
  using ::std::swap;
  swap(a.ip, b.ip);
  swap(a.weight, b.weight);
  swap(a.status, b.status);
  swap(a.__isset, b.__isset);
}

const char* ProxyPolicyInfo::ascii_fingerprint = "258B6C45AADFE10E295522F7E9355361";
const uint8_t ProxyPolicyInfo::binary_fingerprint[16] = {0x25,0x8B,0x6C,0x45,0xAA,0xDF,0xE1,0x0E,0x29,0x55,0x22,0xF7,0xE9,0x35,0x53,0x61};

uint32_t ProxyPolicyInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->viewName);
          this->__isset.viewName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->domain.read(iprot);
          this->__isset.domain = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->serverGroupName);
          this->__isset.serverGroupName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProxyPolicyInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ProxyPolicyInfo");

  xfer += oprot->writeFieldBegin("viewName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->viewName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("domain", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->domain.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.serverGroupName) {
    xfer += oprot->writeFieldBegin("serverGroupName", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->serverGroupName);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ProxyPolicyInfo &a, ProxyPolicyInfo &b) {
  using ::std::swap;
  swap(a.viewName, b.viewName);
  swap(a.domain, b.domain);
  swap(a.serverGroupName, b.serverGroupName);
  swap(a.__isset, b.__isset);
}

const char* TtlPolicyInfo::ascii_fingerprint = "ABFCF56323AB99CBDF1465375AD40CA7";
const uint8_t TtlPolicyInfo::binary_fingerprint[16] = {0xAB,0xFC,0xF5,0x63,0x23,0xAB,0x99,0xCB,0xDF,0x14,0x65,0x37,0x5A,0xD4,0x0C,0xA7};

uint32_t TtlPolicyInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->domain.read(iprot);
          this->__isset.domain = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->minTtl);
          this->__isset.minTtl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->maxTtl);
          this->__isset.maxTtl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TtlPolicyInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TtlPolicyInfo");

  xfer += oprot->writeFieldBegin("domain", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->domain.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.minTtl) {
    xfer += oprot->writeFieldBegin("minTtl", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->minTtl);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.maxTtl) {
    xfer += oprot->writeFieldBegin("maxTtl", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->maxTtl);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TtlPolicyInfo &a, TtlPolicyInfo &b) {
  using ::std::swap;
  swap(a.domain, b.domain);
  swap(a.minTtl, b.minTtl);
  swap(a.maxTtl, b.maxTtl);
  swap(a.__isset, b.__isset);
}

const char* ForwardPolicyInfo::ascii_fingerprint = "761C97469E30FB63D8B979871C7428FA";
const uint8_t ForwardPolicyInfo::binary_fingerprint[16] = {0x76,0x1C,0x97,0x46,0x9E,0x30,0xFB,0x63,0xD8,0xB9,0x79,0x87,0x1C,0x74,0x28,0xFA};

uint32_t ForwardPolicyInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ip.read(iprot);
          this->__isset.ip = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->port);
          this->__isset.port = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->weight);
          this->__isset.weight = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast6;
          xfer += iprot->readI32(ecast6);
          this->status = (Status::type)ecast6;
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ForwardPolicyInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ForwardPolicyInfo");

  xfer += oprot->writeFieldBegin("ip", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->ip.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("port", ::apache::thrift::protocol::T_I16, 2);
  xfer += oprot->writeI16(this->port);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.weight) {
    xfer += oprot->writeFieldBegin("weight", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->weight);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.status) {
    xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32((int32_t)this->status);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ForwardPolicyInfo &a, ForwardPolicyInfo &b) {
  using ::std::swap;
  swap(a.ip, b.ip);
  swap(a.port, b.port);
  swap(a.weight, b.weight);
  swap(a.status, b.status);
  swap(a.__isset, b.__isset);
}

const char* DialRecord::ascii_fingerprint = "2040ECA943D9E6617B68D06B19F667D5";
const uint8_t DialRecord::binary_fingerprint[16] = {0x20,0x40,0xEC,0xA9,0x43,0xD9,0xE6,0x61,0x7B,0x68,0xD0,0x6B,0x19,0xF6,0x67,0xD5};

uint32_t DialRecord::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->rid);
          this->__isset.rid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ip.read(iprot);
          this->__isset.ip = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ttl);
          this->__isset.ttl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->priority);
          this->__isset.priority = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->enabled);
          this->__isset.enabled = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DialRecord::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("DialRecord");

  xfer += oprot->writeFieldBegin("rid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->rid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ip", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->ip.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ttl", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->ttl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("priority", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->priority);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("enabled", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->enabled);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DialRecord &a, DialRecord &b) {
  using ::std::swap;
  swap(a.rid, b.rid);
  swap(a.ip, b.ip);
  swap(a.ttl, b.ttl);
  swap(a.priority, b.priority);
  swap(a.enabled, b.enabled);
  swap(a.__isset, b.__isset);
}

const char* HealthGroupInfo::ascii_fingerprint = "AB879940BD15B6B25691265F7384B271";
const uint8_t HealthGroupInfo::binary_fingerprint[16] = {0xAB,0x87,0x99,0x40,0xBD,0x15,0xB6,0xB2,0x56,0x91,0x26,0x5F,0x73,0x84,0xB2,0x71};

uint32_t HealthGroupInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->zoneName);
          this->__isset.zoneName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->viewName);
          this->__isset.viewName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t HealthGroupInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("HealthGroupInfo");

  xfer += oprot->writeFieldBegin("zoneName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->zoneName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("viewName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->viewName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(HealthGroupInfo &a, HealthGroupInfo &b) {
  using ::std::swap;
  swap(a.zoneName, b.zoneName);
  swap(a.viewName, b.viewName);
  swap(a.name, b.name);
  swap(a.__isset, b.__isset);
}

const char* DialOption::ascii_fingerprint = "B5F393233CDCDBA52FC44870DC4EB043";
const uint8_t DialOption::binary_fingerprint[16] = {0xB5,0xF3,0x93,0x23,0x3C,0xDC,0xDB,0xA5,0x2F,0xC4,0x48,0x70,0xDC,0x4E,0xB0,0x43};

uint32_t DialOption::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->destUrl);
          this->__isset.destUrl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->testMethod);
          this->__isset.testMethod = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->expectCode.clear();
            uint32_t _size7;
            ::apache::thrift::protocol::TType _etype10;
            xfer += iprot->readListBegin(_etype10, _size7);
            this->expectCode.resize(_size7);
            uint32_t _i11;
            for (_i11 = 0; _i11 < _size7; ++_i11)
            {
              xfer += iprot->readI32(this->expectCode[_i11]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.expectCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->expectMatch);
          this->__isset.expectMatch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DialOption::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("DialOption");

  xfer += oprot->writeFieldBegin("destUrl", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->destUrl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("testMethod", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->testMethod);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("expectCode", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->expectCode.size()));
    std::vector<int32_t> ::const_iterator _iter12;
    for (_iter12 = this->expectCode.begin(); _iter12 != this->expectCode.end(); ++_iter12)
    {
      xfer += oprot->writeI32((*_iter12));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("expectMatch", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->expectMatch);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DialOption &a, DialOption &b) {
  using ::std::swap;
  swap(a.destUrl, b.destUrl);
  swap(a.testMethod, b.testMethod);
  swap(a.expectCode, b.expectCode);
  swap(a.expectMatch, b.expectMatch);
  swap(a.__isset, b.__isset);
}

const char* HealthPolicyInfo::ascii_fingerprint = "5553E1F72F0CC7CD5E18B3DD7568AAFF";
const uint8_t HealthPolicyInfo::binary_fingerprint[16] = {0x55,0x53,0xE1,0xF7,0x2F,0x0C,0xC7,0xCD,0x5E,0x18,0xB3,0xDD,0x75,0x68,0xAA,0xFF};

uint32_t HealthPolicyInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast13;
          xfer += iprot->readI32(ecast13);
          this->method = (DialMethod::type)ecast13;
          this->__isset.method = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->port);
          this->__isset.port = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->freq);
          this->__isset.freq = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->times);
          this->__isset.times = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->passed);
          this->__isset.passed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->option.read(iprot);
          this->__isset.option = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t HealthPolicyInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("HealthPolicyInfo");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("method", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->method);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.port) {
    xfer += oprot->writeFieldBegin("port", ::apache::thrift::protocol::T_I16, 3);
    xfer += oprot->writeI16(this->port);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("freq", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->freq);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("times", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->times);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("passed", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->passed);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("option", ::apache::thrift::protocol::T_STRUCT, 7);
  xfer += this->option.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(HealthPolicyInfo &a, HealthPolicyInfo &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.method, b.method);
  swap(a.port, b.port);
  swap(a.freq, b.freq);
  swap(a.times, b.times);
  swap(a.passed, b.passed);
  swap(a.option, b.option);
  swap(a.__isset, b.__isset);
}

const char* FilterReportInfo::ascii_fingerprint = "908BA636099DA6568DBB360822A4B2C4";
const uint8_t FilterReportInfo::binary_fingerprint[16] = {0x90,0x8B,0xA6,0x36,0x09,0x9D,0xA6,0x56,0x8D,0xBB,0x36,0x08,0x22,0xA4,0xB2,0xC4};

uint32_t FilterReportInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->total);
          this->__isset.total = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->exceptIpLimit);
          this->__isset.exceptIpLimit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->exceptUdpLimit);
          this->__isset.exceptUdpLimit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->exceptDnsLimit);
          this->__isset.exceptDnsLimit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ipLimit);
          this->__isset.ipLimit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->domainLimit);
          this->__isset.domainLimit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->aclLimit);
          this->__isset.aclLimit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->userWhiteLimit);
          this->__isset.userWhiteLimit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->userBlackLimit);
          this->__isset.userBlackLimit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->domainBlackLimit);
          this->__isset.domainBlackLimit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t FilterReportInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("FilterReportInfo");

  xfer += oprot->writeFieldBegin("total", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->total);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("exceptIpLimit", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->exceptIpLimit);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("exceptUdpLimit", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->exceptUdpLimit);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("exceptDnsLimit", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->exceptDnsLimit);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ipLimit", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->ipLimit);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("domainLimit", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->domainLimit);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("aclLimit", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->aclLimit);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("userWhiteLimit", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->userWhiteLimit);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("userBlackLimit", ::apache::thrift::protocol::T_I32, 9);
  xfer += oprot->writeI32(this->userBlackLimit);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("domainBlackLimit", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32(this->domainBlackLimit);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(FilterReportInfo &a, FilterReportInfo &b) {
  using ::std::swap;
  swap(a.total, b.total);
  swap(a.exceptIpLimit, b.exceptIpLimit);
  swap(a.exceptUdpLimit, b.exceptUdpLimit);
  swap(a.exceptDnsLimit, b.exceptDnsLimit);
  swap(a.ipLimit, b.ipLimit);
  swap(a.domainLimit, b.domainLimit);
  swap(a.aclLimit, b.aclLimit);
  swap(a.userWhiteLimit, b.userWhiteLimit);
  swap(a.userBlackLimit, b.userBlackLimit);
  swap(a.domainBlackLimit, b.domainBlackLimit);
  swap(a.__isset, b.__isset);
}

const char* RequestReportInfo::ascii_fingerprint = "E559B46C8C264E8A08FC77DF250DF8D1";
const uint8_t RequestReportInfo::binary_fingerprint[16] = {0xE5,0x59,0xB4,0x6C,0x8C,0x26,0x4E,0x8A,0x08,0xFC,0x77,0xDF,0x25,0x0D,0xF8,0xD1};

uint32_t RequestReportInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->total);
          this->__isset.total = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->a);
          this->__isset.a = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->aaaa);
          this->__isset.aaaa = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->cname);
          this->__isset.cname = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ptr);
          this->__isset.ptr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->txt);
          this->__isset.txt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->srv);
          this->__isset.srv = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->naptr);
          this->__isset.naptr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->mx);
          this->__isset.mx = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RequestReportInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RequestReportInfo");

  xfer += oprot->writeFieldBegin("total", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->total);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("a", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->a);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("aaaa", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->aaaa);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cname", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->cname);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ptr", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->ptr);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("txt", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->txt);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("srv", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->srv);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("naptr", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->naptr);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("mx", ::apache::thrift::protocol::T_I32, 9);
  xfer += oprot->writeI32(this->mx);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RequestReportInfo &a, RequestReportInfo &b) {
  using ::std::swap;
  swap(a.total, b.total);
  swap(a.a, b.a);
  swap(a.aaaa, b.aaaa);
  swap(a.cname, b.cname);
  swap(a.ptr, b.ptr);
  swap(a.txt, b.txt);
  swap(a.srv, b.srv);
  swap(a.naptr, b.naptr);
  swap(a.mx, b.mx);
  swap(a.__isset, b.__isset);
}

const char* GeneralReportInfo::ascii_fingerprint = "2EB010665070FC89CB24AB9DA34D5F9D";
const uint8_t GeneralReportInfo::binary_fingerprint[16] = {0x2E,0xB0,0x10,0x66,0x50,0x70,0xFC,0x89,0xCB,0x24,0xAB,0x9D,0xA3,0x4D,0x5F,0x9D};

uint32_t GeneralReportInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->total);
          this->__isset.total = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->noerr);
          this->__isset.noerr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->servfail);
          this->__isset.servfail = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->nxdomain);
          this->__isset.nxdomain = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->refuse);
          this->__isset.refuse = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GeneralReportInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("GeneralReportInfo");

  xfer += oprot->writeFieldBegin("total", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->total);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("noerr", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->noerr);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("servfail", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->servfail);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("nxdomain", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->nxdomain);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("refuse", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->refuse);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GeneralReportInfo &a, GeneralReportInfo &b) {
  using ::std::swap;
  swap(a.total, b.total);
  swap(a.noerr, b.noerr);
  swap(a.servfail, b.servfail);
  swap(a.nxdomain, b.nxdomain);
  swap(a.refuse, b.refuse);
  swap(a.__isset, b.__isset);
}

const char* DNameAccessInfo::ascii_fingerprint = "194A357BC9EE908DC4763D0A5147760A";
const uint8_t DNameAccessInfo::binary_fingerprint[16] = {0x19,0x4A,0x35,0x7B,0xC9,0xEE,0x90,0x8D,0xC4,0x76,0x3D,0x0A,0x51,0x47,0x76,0x0A};

uint32_t DNameAccessInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->zoneName);
          this->__isset.zoneName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->viewName);
          this->__isset.viewName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->domain);
          this->__isset.domain = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->access);
          this->__isset.access = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DNameAccessInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("DNameAccessInfo");

  xfer += oprot->writeFieldBegin("zoneName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->zoneName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("viewName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->viewName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("domain", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->domain);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("access", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->access);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DNameAccessInfo &a, DNameAccessInfo &b) {
  using ::std::swap;
  swap(a.zoneName, b.zoneName);
  swap(a.viewName, b.viewName);
  swap(a.domain, b.domain);
  swap(a.access, b.access);
  swap(a.__isset, b.__isset);
}

const char* XProxyReportInfo::ascii_fingerprint = "2EB010665070FC89CB24AB9DA34D5F9D";
const uint8_t XProxyReportInfo::binary_fingerprint[16] = {0x2E,0xB0,0x10,0x66,0x50,0x70,0xFC,0x89,0xCB,0x24,0xAB,0x9D,0xA3,0x4D,0x5F,0x9D};

uint32_t XProxyReportInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->total);
          this->__isset.total = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->proxyRequest);
          this->__isset.proxyRequest = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->proxyAnswer);
          this->__isset.proxyAnswer = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->proxyForwardRequest);
          this->__isset.proxyForwardRequest = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->proxyForwardAnswer);
          this->__isset.proxyForwardAnswer = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t XProxyReportInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("XProxyReportInfo");

  xfer += oprot->writeFieldBegin("total", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->total);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("proxyRequest", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->proxyRequest);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("proxyAnswer", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->proxyAnswer);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("proxyForwardRequest", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->proxyForwardRequest);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("proxyForwardAnswer", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->proxyForwardAnswer);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(XProxyReportInfo &a, XProxyReportInfo &b) {
  using ::std::swap;
  swap(a.total, b.total);
  swap(a.proxyRequest, b.proxyRequest);
  swap(a.proxyAnswer, b.proxyAnswer);
  swap(a.proxyForwardRequest, b.proxyForwardRequest);
  swap(a.proxyForwardAnswer, b.proxyForwardAnswer);
  swap(a.__isset, b.__isset);
}

const char* XForwardReportInfo::ascii_fingerprint = "6435B39C87AB0E30F30BEDEFD7328C0D";
const uint8_t XForwardReportInfo::binary_fingerprint[16] = {0x64,0x35,0xB3,0x9C,0x87,0xAB,0x0E,0x30,0xF3,0x0B,0xED,0xEF,0xD7,0x32,0x8C,0x0D};

uint32_t XForwardReportInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->total);
          this->__isset.total = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->xforwardRequest);
          this->__isset.xforwardRequest = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->xforwardAnswer);
          this->__isset.xforwardAnswer = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t XForwardReportInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("XForwardReportInfo");

  xfer += oprot->writeFieldBegin("total", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->total);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("xforwardRequest", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->xforwardRequest);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("xforwardAnswer", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->xforwardAnswer);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(XForwardReportInfo &a, XForwardReportInfo &b) {
  using ::std::swap;
  swap(a.total, b.total);
  swap(a.xforwardRequest, b.xforwardRequest);
  swap(a.xforwardAnswer, b.xforwardAnswer);
  swap(a.__isset, b.__isset);
}

const char* RecursiveReportInfo::ascii_fingerprint = "6435B39C87AB0E30F30BEDEFD7328C0D";
const uint8_t RecursiveReportInfo::binary_fingerprint[16] = {0x64,0x35,0xB3,0x9C,0x87,0xAB,0x0E,0x30,0xF3,0x0B,0xED,0xEF,0xD7,0x32,0x8C,0x0D};

uint32_t RecursiveReportInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->total);
          this->__isset.total = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->recursiveRequest);
          this->__isset.recursiveRequest = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->recursiveAnswer);
          this->__isset.recursiveAnswer = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RecursiveReportInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RecursiveReportInfo");

  xfer += oprot->writeFieldBegin("total", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->total);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("recursiveRequest", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->recursiveRequest);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("recursiveAnswer", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->recursiveAnswer);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RecursiveReportInfo &a, RecursiveReportInfo &b) {
  using ::std::swap;
  swap(a.total, b.total);
  swap(a.recursiveRequest, b.recursiveRequest);
  swap(a.recursiveAnswer, b.recursiveAnswer);
  swap(a.__isset, b.__isset);
}

const char* BackGroundReportInfo::ascii_fingerprint = "2EB010665070FC89CB24AB9DA34D5F9D";
const uint8_t BackGroundReportInfo::binary_fingerprint[16] = {0x2E,0xB0,0x10,0x66,0x50,0x70,0xFC,0x89,0xCB,0x24,0xAB,0x9D,0xA3,0x4D,0x5F,0x9D};

uint32_t BackGroundReportInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->total);
          this->__isset.total = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->smartUpdate);
          this->__isset.smartUpdate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->cacheUpdate);
          this->__isset.cacheUpdate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->limitDrop);
          this->__isset.limitDrop = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ttlExpire);
          this->__isset.ttlExpire = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t BackGroundReportInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("BackGroundReportInfo");

  xfer += oprot->writeFieldBegin("total", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->total);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("smartUpdate", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->smartUpdate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cacheUpdate", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->cacheUpdate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("limitDrop", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->limitDrop);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ttlExpire", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->ttlExpire);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(BackGroundReportInfo &a, BackGroundReportInfo &b) {
  using ::std::swap;
  swap(a.total, b.total);
  swap(a.smartUpdate, b.smartUpdate);
  swap(a.cacheUpdate, b.cacheUpdate);
  swap(a.limitDrop, b.limitDrop);
  swap(a.ttlExpire, b.ttlExpire);
  swap(a.__isset, b.__isset);
}

const char* TopnIpInfo::ascii_fingerprint = "EEBC915CE44901401D881E6091423036";
const uint8_t TopnIpInfo::binary_fingerprint[16] = {0xEE,0xBC,0x91,0x5C,0xE4,0x49,0x01,0x40,0x1D,0x88,0x1E,0x60,0x91,0x42,0x30,0x36};

uint32_t TopnIpInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ip);
          this->__isset.ip = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->access);
          this->__isset.access = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TopnIpInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TopnIpInfo");

  xfer += oprot->writeFieldBegin("ip", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->ip);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("access", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->access);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TopnIpInfo &a, TopnIpInfo &b) {
  using ::std::swap;
  swap(a.ip, b.ip);
  swap(a.access, b.access);
  swap(a.__isset, b.__isset);
}

const char* TopnDomainInfo::ascii_fingerprint = "EEBC915CE44901401D881E6091423036";
const uint8_t TopnDomainInfo::binary_fingerprint[16] = {0xEE,0xBC,0x91,0x5C,0xE4,0x49,0x01,0x40,0x1D,0x88,0x1E,0x60,0x91,0x42,0x30,0x36};

uint32_t TopnDomainInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->domain);
          this->__isset.domain = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->access);
          this->__isset.access = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TopnDomainInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TopnDomainInfo");

  xfer += oprot->writeFieldBegin("domain", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->domain);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("access", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->access);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TopnDomainInfo &a, TopnDomainInfo &b) {
  using ::std::swap;
  swap(a.domain, b.domain);
  swap(a.access, b.access);
  swap(a.__isset, b.__isset);
}

const char* TopnDnameInfo::ascii_fingerprint = "EEBC915CE44901401D881E6091423036";
const uint8_t TopnDnameInfo::binary_fingerprint[16] = {0xEE,0xBC,0x91,0x5C,0xE4,0x49,0x01,0x40,0x1D,0x88,0x1E,0x60,0x91,0x42,0x30,0x36};

uint32_t TopnDnameInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dname);
          this->__isset.dname = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->access);
          this->__isset.access = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TopnDnameInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TopnDnameInfo");

  xfer += oprot->writeFieldBegin("dname", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->dname);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("access", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->access);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TopnDnameInfo &a, TopnDnameInfo &b) {
  using ::std::swap;
  swap(a.dname, b.dname);
  swap(a.access, b.access);
  swap(a.__isset, b.__isset);
}

const char* HostInfo::ascii_fingerprint = "154BB42C2FFD70F8B3993568C50C5613";
const uint8_t HostInfo::binary_fingerprint[16] = {0x15,0x4B,0xB4,0x2C,0x2F,0xFD,0x70,0xF8,0xB3,0x99,0x35,0x68,0xC5,0x0C,0x56,0x13};

uint32_t HostInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->cpu);
          this->__isset.cpu = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->memory);
          this->__isset.memory = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->nicin);
          this->__isset.nicin = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->nicout);
          this->__isset.nicout = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t HostInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("HostInfo");

  xfer += oprot->writeFieldBegin("cpu", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->cpu);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("memory", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->memory);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("nicin", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->nicin);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("nicout", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->nicout);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(HostInfo &a, HostInfo &b) {
  using ::std::swap;
  swap(a.cpu, b.cpu);
  swap(a.memory, b.memory);
  swap(a.nicin, b.nicin);
  swap(a.nicout, b.nicout);
  swap(a.__isset, b.__isset);
}

const char* HeartBeatState::ascii_fingerprint = "7D4563655A5F82FED16B1F5CE7672F0F";
const uint8_t HeartBeatState::binary_fingerprint[16] = {0x7D,0x45,0x63,0x65,0x5A,0x5F,0x82,0xFE,0xD1,0x6B,0x1F,0x5C,0xE7,0x67,0x2F,0x0F};

uint32_t HeartBeatState::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast14;
          xfer += iprot->readI32(ecast14);
          this->mState = (ModuleState::type)ecast14;
          this->__isset.mState = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->serverState);
          this->__isset.serverState = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t HeartBeatState::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("HeartBeatState");

  xfer += oprot->writeFieldBegin("mState", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->mState);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("serverState", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->serverState);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(HeartBeatState &a, HeartBeatState &b) {
  using ::std::swap;
  swap(a.mState, b.mState);
  swap(a.serverState, b.serverState);
  swap(a.__isset, b.__isset);
}

const char* IpOverAlarm::ascii_fingerprint = "13EAA24218838F6B07279A3F28B6D9A0";
const uint8_t IpOverAlarm::binary_fingerprint[16] = {0x13,0xEA,0xA2,0x42,0x18,0x83,0x8F,0x6B,0x07,0x27,0x9A,0x3F,0x28,0xB6,0xD9,0xA0};

uint32_t IpOverAlarm::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ip.read(iprot);
          this->__isset.ip = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->qps);
          this->__isset.qps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast15;
          xfer += iprot->readI32(ecast15);
          this->status = (AlarmStatus::type)ecast15;
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t IpOverAlarm::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("IpOverAlarm");

  xfer += oprot->writeFieldBegin("ip", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->ip.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("qps", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->qps);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(IpOverAlarm &a, IpOverAlarm &b) {
  using ::std::swap;
  swap(a.ip, b.ip);
  swap(a.qps, b.qps);
  swap(a.status, b.status);
  swap(a.__isset, b.__isset);
}

const char* DomainOverAlarm::ascii_fingerprint = "96C988B79E91E91C48D2DFD60D1C05CF";
const uint8_t DomainOverAlarm::binary_fingerprint[16] = {0x96,0xC9,0x88,0xB7,0x9E,0x91,0xE9,0x1C,0x48,0xD2,0xDF,0xD6,0x0D,0x1C,0x05,0xCF};

uint32_t DomainOverAlarm::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->domain);
          this->__isset.domain = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->qps);
          this->__isset.qps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast16;
          xfer += iprot->readI32(ecast16);
          this->status = (AlarmStatus::type)ecast16;
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DomainOverAlarm::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("DomainOverAlarm");

  xfer += oprot->writeFieldBegin("domain", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->domain);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("qps", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->qps);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DomainOverAlarm &a, DomainOverAlarm &b) {
  using ::std::swap;
  swap(a.domain, b.domain);
  swap(a.qps, b.qps);
  swap(a.status, b.status);
  swap(a.__isset, b.__isset);
}

const char* NginxServerAlarm::ascii_fingerprint = "4F8ABE747D9A2DF14F7E84DDBE60D55C";
const uint8_t NginxServerAlarm::binary_fingerprint[16] = {0x4F,0x8A,0xBE,0x74,0x7D,0x9A,0x2D,0xF1,0x4F,0x7E,0x84,0xDD,0xBE,0x60,0xD5,0x5C};

uint32_t NginxServerAlarm::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->serverName);
          this->__isset.serverName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->localUrl);
          this->__isset.localUrl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast17;
          xfer += iprot->readI32(ecast17);
          this->status = (AlarmStatus::type)ecast17;
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t NginxServerAlarm::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("NginxServerAlarm");

  xfer += oprot->writeFieldBegin("serverName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->serverName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("localUrl", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->localUrl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(NginxServerAlarm &a, NginxServerAlarm &b) {
  using ::std::swap;
  swap(a.serverName, b.serverName);
  swap(a.localUrl, b.localUrl);
  swap(a.status, b.status);
  swap(a.__isset, b.__isset);
}

const char* ZoneRequestReport::ascii_fingerprint = "4D7DD3430049298E2D7E6201D4E8B827";
const uint8_t ZoneRequestReport::binary_fingerprint[16] = {0x4D,0x7D,0xD3,0x43,0x00,0x49,0x29,0x8E,0x2D,0x7E,0x62,0x01,0xD4,0xE8,0xB8,0x27};

uint32_t ZoneRequestReport::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->zoneName);
          this->__isset.zoneName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->viewName);
          this->__isset.viewName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->data.read(iprot);
          this->__isset.data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ZoneRequestReport::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ZoneRequestReport");

  xfer += oprot->writeFieldBegin("zoneName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->zoneName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("viewName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->viewName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("data", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->data.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ZoneRequestReport &a, ZoneRequestReport &b) {
  using ::std::swap;
  swap(a.zoneName, b.zoneName);
  swap(a.viewName, b.viewName);
  swap(a.data, b.data);
  swap(a.__isset, b.__isset);
}

const char* ZoneAnswerReport::ascii_fingerprint = "D81548DBE1CF3015E17791692C4E5463";
const uint8_t ZoneAnswerReport::binary_fingerprint[16] = {0xD8,0x15,0x48,0xDB,0xE1,0xCF,0x30,0x15,0xE1,0x77,0x91,0x69,0x2C,0x4E,0x54,0x63};

uint32_t ZoneAnswerReport::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->zoneName);
          this->__isset.zoneName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->viewName);
          this->__isset.viewName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->data.read(iprot);
          this->__isset.data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ZoneAnswerReport::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ZoneAnswerReport");

  xfer += oprot->writeFieldBegin("zoneName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->zoneName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("viewName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->viewName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("data", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->data.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ZoneAnswerReport &a, ZoneAnswerReport &b) {
  using ::std::swap;
  swap(a.zoneName, b.zoneName);
  swap(a.viewName, b.viewName);
  swap(a.data, b.data);
  swap(a.__isset, b.__isset);
}

const char* XproxyReport::ascii_fingerprint = "107E378D8E4593420B89A5C9A71CD82A";
const uint8_t XproxyReport::binary_fingerprint[16] = {0x10,0x7E,0x37,0x8D,0x8E,0x45,0x93,0x42,0x0B,0x89,0xA5,0xC9,0xA7,0x1C,0xD8,0x2A};

uint32_t XproxyReport::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->xproxy);
          this->__isset.xproxy = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->data.read(iprot);
          this->__isset.data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t XproxyReport::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("XproxyReport");

  xfer += oprot->writeFieldBegin("xproxy", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->xproxy);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("data", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->data.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(XproxyReport &a, XproxyReport &b) {
  using ::std::swap;
  swap(a.xproxy, b.xproxy);
  swap(a.data, b.data);
  swap(a.__isset, b.__isset);
}

const char* XforwardReport::ascii_fingerprint = "AFD8F2FE5294FE5E66108B008183156D";
const uint8_t XforwardReport::binary_fingerprint[16] = {0xAF,0xD8,0xF2,0xFE,0x52,0x94,0xFE,0x5E,0x66,0x10,0x8B,0x00,0x81,0x83,0x15,0x6D};

uint32_t XforwardReport::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->xforward);
          this->__isset.xforward = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->data.read(iprot);
          this->__isset.data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t XforwardReport::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("XforwardReport");

  xfer += oprot->writeFieldBegin("xforward", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->xforward);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("data", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->data.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(XforwardReport &a, XforwardReport &b) {
  using ::std::swap;
  swap(a.xforward, b.xforward);
  swap(a.data, b.data);
  swap(a.__isset, b.__isset);
}

const char* RedirectServerInfo::ascii_fingerprint = "84632E6A4367F107E1E7EAF900AFEA6B";
const uint8_t RedirectServerInfo::binary_fingerprint[16] = {0x84,0x63,0x2E,0x6A,0x43,0x67,0xF1,0x07,0xE1,0xE7,0xEA,0xF9,0x00,0xAF,0xEA,0x6B};

uint32_t RedirectServerInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ip.read(iprot);
          this->__isset.ip = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->weight);
          this->__isset.weight = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast18;
          xfer += iprot->readI32(ecast18);
          this->status = (Status::type)ecast18;
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RedirectServerInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RedirectServerInfo");

  xfer += oprot->writeFieldBegin("ip", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->ip.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.weight) {
    xfer += oprot->writeFieldBegin("weight", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->weight);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.status) {
    xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32((int32_t)this->status);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RedirectServerInfo &a, RedirectServerInfo &b) {
  using ::std::swap;
  swap(a.ip, b.ip);
  swap(a.weight, b.weight);
  swap(a.status, b.status);
  swap(a.__isset, b.__isset);
}

const char* NginxProxyInfo::ascii_fingerprint = "C54745CF5E2800BFF941910D5280EE48";
const uint8_t NginxProxyInfo::binary_fingerprint[16] = {0xC5,0x47,0x45,0xCF,0x5E,0x28,0x00,0xBF,0xF9,0x41,0x91,0x0D,0x52,0x80,0xEE,0x48};

uint32_t NginxProxyInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->proxyDomain);
          this->__isset.proxyDomain = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->proxyPort);
          this->__isset.proxyPort = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->targetIpAddr);
          this->__isset.targetIpAddr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->targetURL);
          this->__isset.targetURL = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->protocol);
          this->__isset.protocol = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t NginxProxyInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("NginxProxyInfo");

  xfer += oprot->writeFieldBegin("proxyDomain", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->proxyDomain);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("proxyPort", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->proxyPort);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("targetIpAddr", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->targetIpAddr);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("targetURL", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->targetURL);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("protocol", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->protocol);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(NginxProxyInfo &a, NginxProxyInfo &b) {
  using ::std::swap;
  swap(a.proxyDomain, b.proxyDomain);
  swap(a.proxyPort, b.proxyPort);
  swap(a.targetIpAddr, b.targetIpAddr);
  swap(a.targetURL, b.targetURL);
  swap(a.protocol, b.protocol);
  swap(a.__isset, b.__isset);
}

const char* CateWeight::ascii_fingerprint = "989D1F1AE8D148D5E2119FFEC4BBBEE3";
const uint8_t CateWeight::binary_fingerprint[16] = {0x98,0x9D,0x1F,0x1A,0xE8,0xD1,0x48,0xD5,0xE2,0x11,0x9F,0xFE,0xC4,0xBB,0xBE,0xE3};

uint32_t CateWeight::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->cate);
          this->__isset.cate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->weight);
          this->__isset.weight = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CateWeight::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("CateWeight");

  xfer += oprot->writeFieldBegin("cate", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->cate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("weight", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->weight);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CateWeight &a, CateWeight &b) {
  using ::std::swap;
  swap(a.cate, b.cate);
  swap(a.weight, b.weight);
  swap(a.__isset, b.__isset);
}

}}} // namespace
