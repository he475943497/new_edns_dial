/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Agent_H
#define Agent_H

#include "thrift/TDispatchProcessor.h"
#include "dnsrpc_types.h"

namespace rpc { namespace yamutech { namespace com {

class AgentIf {
 public:
  virtual ~AgentIf() {}
  virtual RetCode::type registerModule(const ModuleType::type typ) = 0;
  virtual RetCode::type updateHealthStatus(const HealthGroupInfo& health, const std::vector<DialRecordStatus> & statusList, const std::string& policyName) = 0;
  virtual RetCode::type updateServerStatus(const DialServerStatus& status, const DialServerType::type typ) = 0;
  virtual RetCode::type addProxyPolicy(const ProxyPolicyInfo& policy) = 0;
  virtual RetCode::type delProxyPolicy(const ProxyPolicyInfo& policy) = 0;
  virtual RetCode::type updateNginxStatus(const std::string& groupName, const std::vector<DialNginxStatus> & statusList, const std::string& policyName) = 0;
};

class AgentIfFactory {
 public:
  typedef AgentIf Handler;

  virtual ~AgentIfFactory() {}

  virtual AgentIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(AgentIf* /* handler */) = 0;
};

class AgentIfSingletonFactory : virtual public AgentIfFactory {
 public:
  AgentIfSingletonFactory(const boost::shared_ptr<AgentIf>& iface) : iface_(iface) {}
  virtual ~AgentIfSingletonFactory() {}

  virtual AgentIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(AgentIf* /* handler */) {}

 protected:
  boost::shared_ptr<AgentIf> iface_;
};

class AgentNull : virtual public AgentIf {
 public:
  virtual ~AgentNull() {}
  RetCode::type registerModule(const ModuleType::type /* typ */) {
    RetCode::type _return = (RetCode::type)0;
    return _return;
  }
  RetCode::type updateHealthStatus(const HealthGroupInfo& /* health */, const std::vector<DialRecordStatus> & /* statusList */, const std::string& /* policyName */) {
    RetCode::type _return = (RetCode::type)0;
    return _return;
  }
  RetCode::type updateServerStatus(const DialServerStatus& /* status */, const DialServerType::type /* typ */) {
    RetCode::type _return = (RetCode::type)0;
    return _return;
  }
  RetCode::type addProxyPolicy(const ProxyPolicyInfo& /* policy */) {
    RetCode::type _return = (RetCode::type)0;
    return _return;
  }
  RetCode::type delProxyPolicy(const ProxyPolicyInfo& /* policy */) {
    RetCode::type _return = (RetCode::type)0;
    return _return;
  }
  RetCode::type updateNginxStatus(const std::string& /* groupName */, const std::vector<DialNginxStatus> & /* statusList */, const std::string& /* policyName */) {
    RetCode::type _return = (RetCode::type)0;
    return _return;
  }
};

typedef struct _Agent_registerModule_args__isset {
  _Agent_registerModule_args__isset() : typ(false) {}
  bool typ;
} _Agent_registerModule_args__isset;

class Agent_registerModule_args {
 public:

  Agent_registerModule_args() : typ((ModuleType::type)0) {
  }

  virtual ~Agent_registerModule_args() throw() {}

  ModuleType::type typ;

  _Agent_registerModule_args__isset __isset;

  void __set_typ(const ModuleType::type val) {
    typ = val;
  }

  bool operator == (const Agent_registerModule_args & rhs) const
  {
    if (!(typ == rhs.typ))
      return false;
    return true;
  }
  bool operator != (const Agent_registerModule_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Agent_registerModule_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Agent_registerModule_pargs {
 public:


  virtual ~Agent_registerModule_pargs() throw() {}

  const ModuleType::type* typ;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Agent_registerModule_result__isset {
  _Agent_registerModule_result__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _Agent_registerModule_result__isset;

class Agent_registerModule_result {
 public:

  Agent_registerModule_result() : success((RetCode::type)0) {
  }

  virtual ~Agent_registerModule_result() throw() {}

  RetCode::type success;
  Xception ex;

  _Agent_registerModule_result__isset __isset;

  void __set_success(const RetCode::type val) {
    success = val;
  }

  void __set_ex(const Xception& val) {
    ex = val;
  }

  bool operator == (const Agent_registerModule_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const Agent_registerModule_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Agent_registerModule_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Agent_registerModule_presult__isset {
  _Agent_registerModule_presult__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _Agent_registerModule_presult__isset;

class Agent_registerModule_presult {
 public:


  virtual ~Agent_registerModule_presult() throw() {}

  RetCode::type* success;
  Xception ex;

  _Agent_registerModule_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Agent_updateHealthStatus_args__isset {
  _Agent_updateHealthStatus_args__isset() : health(false), statusList(false), policyName(false) {}
  bool health;
  bool statusList;
  bool policyName;
} _Agent_updateHealthStatus_args__isset;

class Agent_updateHealthStatus_args {
 public:

  Agent_updateHealthStatus_args() : policyName() {
  }

  virtual ~Agent_updateHealthStatus_args() throw() {}

  HealthGroupInfo health;
  std::vector<DialRecordStatus>  statusList;
  std::string policyName;

  _Agent_updateHealthStatus_args__isset __isset;

  void __set_health(const HealthGroupInfo& val) {
    health = val;
  }

  void __set_statusList(const std::vector<DialRecordStatus> & val) {
    statusList = val;
  }

  void __set_policyName(const std::string& val) {
    policyName = val;
  }

  bool operator == (const Agent_updateHealthStatus_args & rhs) const
  {
    if (!(health == rhs.health))
      return false;
    if (!(statusList == rhs.statusList))
      return false;
    if (!(policyName == rhs.policyName))
      return false;
    return true;
  }
  bool operator != (const Agent_updateHealthStatus_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Agent_updateHealthStatus_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Agent_updateHealthStatus_pargs {
 public:


  virtual ~Agent_updateHealthStatus_pargs() throw() {}

  const HealthGroupInfo* health;
  const std::vector<DialRecordStatus> * statusList;
  const std::string* policyName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Agent_updateHealthStatus_result__isset {
  _Agent_updateHealthStatus_result__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _Agent_updateHealthStatus_result__isset;

class Agent_updateHealthStatus_result {
 public:

  Agent_updateHealthStatus_result() : success((RetCode::type)0) {
  }

  virtual ~Agent_updateHealthStatus_result() throw() {}

  RetCode::type success;
  Xception ex;

  _Agent_updateHealthStatus_result__isset __isset;

  void __set_success(const RetCode::type val) {
    success = val;
  }

  void __set_ex(const Xception& val) {
    ex = val;
  }

  bool operator == (const Agent_updateHealthStatus_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const Agent_updateHealthStatus_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Agent_updateHealthStatus_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Agent_updateHealthStatus_presult__isset {
  _Agent_updateHealthStatus_presult__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _Agent_updateHealthStatus_presult__isset;

class Agent_updateHealthStatus_presult {
 public:


  virtual ~Agent_updateHealthStatus_presult() throw() {}

  RetCode::type* success;
  Xception ex;

  _Agent_updateHealthStatus_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Agent_updateServerStatus_args__isset {
  _Agent_updateServerStatus_args__isset() : status(false), typ(false) {}
  bool status;
  bool typ;
} _Agent_updateServerStatus_args__isset;

class Agent_updateServerStatus_args {
 public:

  Agent_updateServerStatus_args() : typ((DialServerType::type)0) {
  }

  virtual ~Agent_updateServerStatus_args() throw() {}

  DialServerStatus status;
  DialServerType::type typ;

  _Agent_updateServerStatus_args__isset __isset;

  void __set_status(const DialServerStatus& val) {
    status = val;
  }

  void __set_typ(const DialServerType::type val) {
    typ = val;
  }

  bool operator == (const Agent_updateServerStatus_args & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (!(typ == rhs.typ))
      return false;
    return true;
  }
  bool operator != (const Agent_updateServerStatus_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Agent_updateServerStatus_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Agent_updateServerStatus_pargs {
 public:


  virtual ~Agent_updateServerStatus_pargs() throw() {}

  const DialServerStatus* status;
  const DialServerType::type* typ;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Agent_updateServerStatus_result__isset {
  _Agent_updateServerStatus_result__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _Agent_updateServerStatus_result__isset;

class Agent_updateServerStatus_result {
 public:

  Agent_updateServerStatus_result() : success((RetCode::type)0) {
  }

  virtual ~Agent_updateServerStatus_result() throw() {}

  RetCode::type success;
  Xception ex;

  _Agent_updateServerStatus_result__isset __isset;

  void __set_success(const RetCode::type val) {
    success = val;
  }

  void __set_ex(const Xception& val) {
    ex = val;
  }

  bool operator == (const Agent_updateServerStatus_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const Agent_updateServerStatus_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Agent_updateServerStatus_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Agent_updateServerStatus_presult__isset {
  _Agent_updateServerStatus_presult__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _Agent_updateServerStatus_presult__isset;

class Agent_updateServerStatus_presult {
 public:


  virtual ~Agent_updateServerStatus_presult() throw() {}

  RetCode::type* success;
  Xception ex;

  _Agent_updateServerStatus_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Agent_addProxyPolicy_args__isset {
  _Agent_addProxyPolicy_args__isset() : policy(false) {}
  bool policy;
} _Agent_addProxyPolicy_args__isset;

class Agent_addProxyPolicy_args {
 public:

  Agent_addProxyPolicy_args() {
  }

  virtual ~Agent_addProxyPolicy_args() throw() {}

  ProxyPolicyInfo policy;

  _Agent_addProxyPolicy_args__isset __isset;

  void __set_policy(const ProxyPolicyInfo& val) {
    policy = val;
  }

  bool operator == (const Agent_addProxyPolicy_args & rhs) const
  {
    if (!(policy == rhs.policy))
      return false;
    return true;
  }
  bool operator != (const Agent_addProxyPolicy_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Agent_addProxyPolicy_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Agent_addProxyPolicy_pargs {
 public:


  virtual ~Agent_addProxyPolicy_pargs() throw() {}

  const ProxyPolicyInfo* policy;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Agent_addProxyPolicy_result__isset {
  _Agent_addProxyPolicy_result__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _Agent_addProxyPolicy_result__isset;

class Agent_addProxyPolicy_result {
 public:

  Agent_addProxyPolicy_result() : success((RetCode::type)0) {
  }

  virtual ~Agent_addProxyPolicy_result() throw() {}

  RetCode::type success;
  Xception ex;

  _Agent_addProxyPolicy_result__isset __isset;

  void __set_success(const RetCode::type val) {
    success = val;
  }

  void __set_ex(const Xception& val) {
    ex = val;
  }

  bool operator == (const Agent_addProxyPolicy_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const Agent_addProxyPolicy_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Agent_addProxyPolicy_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Agent_addProxyPolicy_presult__isset {
  _Agent_addProxyPolicy_presult__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _Agent_addProxyPolicy_presult__isset;

class Agent_addProxyPolicy_presult {
 public:


  virtual ~Agent_addProxyPolicy_presult() throw() {}

  RetCode::type* success;
  Xception ex;

  _Agent_addProxyPolicy_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Agent_delProxyPolicy_args__isset {
  _Agent_delProxyPolicy_args__isset() : policy(false) {}
  bool policy;
} _Agent_delProxyPolicy_args__isset;

class Agent_delProxyPolicy_args {
 public:

  Agent_delProxyPolicy_args() {
  }

  virtual ~Agent_delProxyPolicy_args() throw() {}

  ProxyPolicyInfo policy;

  _Agent_delProxyPolicy_args__isset __isset;

  void __set_policy(const ProxyPolicyInfo& val) {
    policy = val;
  }

  bool operator == (const Agent_delProxyPolicy_args & rhs) const
  {
    if (!(policy == rhs.policy))
      return false;
    return true;
  }
  bool operator != (const Agent_delProxyPolicy_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Agent_delProxyPolicy_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Agent_delProxyPolicy_pargs {
 public:


  virtual ~Agent_delProxyPolicy_pargs() throw() {}

  const ProxyPolicyInfo* policy;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Agent_delProxyPolicy_result__isset {
  _Agent_delProxyPolicy_result__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _Agent_delProxyPolicy_result__isset;

class Agent_delProxyPolicy_result {
 public:

  Agent_delProxyPolicy_result() : success((RetCode::type)0) {
  }

  virtual ~Agent_delProxyPolicy_result() throw() {}

  RetCode::type success;
  Xception ex;

  _Agent_delProxyPolicy_result__isset __isset;

  void __set_success(const RetCode::type val) {
    success = val;
  }

  void __set_ex(const Xception& val) {
    ex = val;
  }

  bool operator == (const Agent_delProxyPolicy_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const Agent_delProxyPolicy_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Agent_delProxyPolicy_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Agent_delProxyPolicy_presult__isset {
  _Agent_delProxyPolicy_presult__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _Agent_delProxyPolicy_presult__isset;

class Agent_delProxyPolicy_presult {
 public:


  virtual ~Agent_delProxyPolicy_presult() throw() {}

  RetCode::type* success;
  Xception ex;

  _Agent_delProxyPolicy_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Agent_updateNginxStatus_args__isset {
  _Agent_updateNginxStatus_args__isset() : groupName(false), statusList(false), policyName(false) {}
  bool groupName;
  bool statusList;
  bool policyName;
} _Agent_updateNginxStatus_args__isset;

class Agent_updateNginxStatus_args {
 public:

  Agent_updateNginxStatus_args() : groupName(), policyName() {
  }

  virtual ~Agent_updateNginxStatus_args() throw() {}

  std::string groupName;
  std::vector<DialNginxStatus>  statusList;
  std::string policyName;

  _Agent_updateNginxStatus_args__isset __isset;

  void __set_groupName(const std::string& val) {
    groupName = val;
  }

  void __set_statusList(const std::vector<DialNginxStatus> & val) {
    statusList = val;
  }

  void __set_policyName(const std::string& val) {
    policyName = val;
  }

  bool operator == (const Agent_updateNginxStatus_args & rhs) const
  {
    if (!(groupName == rhs.groupName))
      return false;
    if (!(statusList == rhs.statusList))
      return false;
    if (!(policyName == rhs.policyName))
      return false;
    return true;
  }
  bool operator != (const Agent_updateNginxStatus_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Agent_updateNginxStatus_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Agent_updateNginxStatus_pargs {
 public:


  virtual ~Agent_updateNginxStatus_pargs() throw() {}

  const std::string* groupName;
  const std::vector<DialNginxStatus> * statusList;
  const std::string* policyName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Agent_updateNginxStatus_result__isset {
  _Agent_updateNginxStatus_result__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _Agent_updateNginxStatus_result__isset;

class Agent_updateNginxStatus_result {
 public:

  Agent_updateNginxStatus_result() : success((RetCode::type)0) {
  }

  virtual ~Agent_updateNginxStatus_result() throw() {}

  RetCode::type success;
  Xception ex;

  _Agent_updateNginxStatus_result__isset __isset;

  void __set_success(const RetCode::type val) {
    success = val;
  }

  void __set_ex(const Xception& val) {
    ex = val;
  }

  bool operator == (const Agent_updateNginxStatus_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const Agent_updateNginxStatus_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Agent_updateNginxStatus_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Agent_updateNginxStatus_presult__isset {
  _Agent_updateNginxStatus_presult__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _Agent_updateNginxStatus_presult__isset;

class Agent_updateNginxStatus_presult {
 public:


  virtual ~Agent_updateNginxStatus_presult() throw() {}

  RetCode::type* success;
  Xception ex;

  _Agent_updateNginxStatus_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class AgentClient : virtual public AgentIf {
 public:
  AgentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  AgentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  RetCode::type registerModule(const ModuleType::type typ);
  void send_registerModule(const ModuleType::type typ);
  RetCode::type recv_registerModule();
  RetCode::type updateHealthStatus(const HealthGroupInfo& health, const std::vector<DialRecordStatus> & statusList, const std::string& policyName);
  void send_updateHealthStatus(const HealthGroupInfo& health, const std::vector<DialRecordStatus> & statusList, const std::string& policyName);
  RetCode::type recv_updateHealthStatus();
  RetCode::type updateServerStatus(const DialServerStatus& status, const DialServerType::type typ);
  void send_updateServerStatus(const DialServerStatus& status, const DialServerType::type typ);
  RetCode::type recv_updateServerStatus();
  RetCode::type addProxyPolicy(const ProxyPolicyInfo& policy);
  void send_addProxyPolicy(const ProxyPolicyInfo& policy);
  RetCode::type recv_addProxyPolicy();
  RetCode::type delProxyPolicy(const ProxyPolicyInfo& policy);
  void send_delProxyPolicy(const ProxyPolicyInfo& policy);
  RetCode::type recv_delProxyPolicy();
  RetCode::type updateNginxStatus(const std::string& groupName, const std::vector<DialNginxStatus> & statusList, const std::string& policyName);
  void send_updateNginxStatus(const std::string& groupName, const std::vector<DialNginxStatus> & statusList, const std::string& policyName);
  RetCode::type recv_updateNginxStatus();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class AgentProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<AgentIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (AgentProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_registerModule(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateHealthStatus(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateServerStatus(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addProxyPolicy(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_delProxyPolicy(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateNginxStatus(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  AgentProcessor(boost::shared_ptr<AgentIf> iface) :
    iface_(iface) {
    processMap_["registerModule"] = &AgentProcessor::process_registerModule;
    processMap_["updateHealthStatus"] = &AgentProcessor::process_updateHealthStatus;
    processMap_["updateServerStatus"] = &AgentProcessor::process_updateServerStatus;
    processMap_["addProxyPolicy"] = &AgentProcessor::process_addProxyPolicy;
    processMap_["delProxyPolicy"] = &AgentProcessor::process_delProxyPolicy;
    processMap_["updateNginxStatus"] = &AgentProcessor::process_updateNginxStatus;
  }

  virtual ~AgentProcessor() {}
};

class AgentProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  AgentProcessorFactory(const ::boost::shared_ptr< AgentIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< AgentIfFactory > handlerFactory_;
};

class AgentMultiface : virtual public AgentIf {
 public:
  AgentMultiface(std::vector<boost::shared_ptr<AgentIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~AgentMultiface() {}
 protected:
  std::vector<boost::shared_ptr<AgentIf> > ifaces_;
  AgentMultiface() {}
  void add(boost::shared_ptr<AgentIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  RetCode::type registerModule(const ModuleType::type typ) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->registerModule(typ);
    }
    return ifaces_[i]->registerModule(typ);
  }

  RetCode::type updateHealthStatus(const HealthGroupInfo& health, const std::vector<DialRecordStatus> & statusList, const std::string& policyName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateHealthStatus(health, statusList, policyName);
    }
    return ifaces_[i]->updateHealthStatus(health, statusList, policyName);
  }

  RetCode::type updateServerStatus(const DialServerStatus& status, const DialServerType::type typ) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateServerStatus(status, typ);
    }
    return ifaces_[i]->updateServerStatus(status, typ);
  }

  RetCode::type addProxyPolicy(const ProxyPolicyInfo& policy) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addProxyPolicy(policy);
    }
    return ifaces_[i]->addProxyPolicy(policy);
  }

  RetCode::type delProxyPolicy(const ProxyPolicyInfo& policy) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->delProxyPolicy(policy);
    }
    return ifaces_[i]->delProxyPolicy(policy);
  }

  RetCode::type updateNginxStatus(const std::string& groupName, const std::vector<DialNginxStatus> & statusList, const std::string& policyName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateNginxStatus(groupName, statusList, policyName);
    }
    return ifaces_[i]->updateNginxStatus(groupName, statusList, policyName);
  }

};

}}} // namespace

#endif
